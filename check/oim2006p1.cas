pointc(x):=(1+i*x)/(1-i*x);
assume(a=[0.444444444444,0,2,0.1]);
assume(b=[0.7,0,5,0.1]);
P1:=point(-1,display=hidden_name);
P2:=point(pointc(a),display=hidden_name);
P3:=point(pointc(-b),display=hidden_name);
L1:=perpendicular(P1,line(0,P1)):;
L2:=perpendicular(P2,line(0,P2)):;
L3:=perpendicular(P3,line(0,P3)):;
A:=single_inter(L1,L2);
B:=single_inter(L2,L3);
C:=single_inter(L3,L1);
triangle(A,B,C);circle(0,1);
assume(c=[0.296145553732,-1,5,0.1]);
assume(d=[-0.2,-5,5,0.1]);
P:=point(c,d);
evalf(angle(B,A,P)+angle(C,P,A)-angle(B,P,C)-angle(C,B,P));
zz:=c+i*d; aa:=affix(A); bb:=affix(B); cc:=affix(C); angle(evalf(A),B,C)/2; alpha:=-1.0*atan(a);
evalf(angle(B,A,P)+angle(C,P,A)-angle(B,P,C)-angle(C,B,P)); evalf(distance2(A,P)-distance2(A,0));
eq:=numer(im((zz-bb)/(aa-bb)*(aa-cc)/(zz-cc)*(zz-bb)/(cc-bb)*(bb-cc)/(zz-cc))):;
factor(normal((aa-cc)/(aa-bb)));
eq:=numer(im((zz-bb)/(zz-cc)/(a-i))):;
N:=factor(distance2(A,P)-distance2(A,0)); evalf(N);
N:=numer(N);
[cc1,cc2]:=solve(eq=0,c);
evalf(cc1,cc2);
NN1,NN2:=normal(subst(N,c=cc1)),normal(subst(N,c=cc2));
pr:=factor(normal(NN1*NN2));
so:=factor(normal(NN1+NN2));
normal(subst(cc1,d=0));
factor(subst(cc2,d=0));

