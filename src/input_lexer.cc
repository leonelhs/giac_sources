#line 2 "input_lexer.cc"

#line 4 "input_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE giac_yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via giac_yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void giac_yyrestart (FILE *input_file ,yyscan_t yyscanner );
void giac_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void giac_yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void giac_yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void giac_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void giac_yypop_buffer_state (yyscan_t yyscanner );

static void giac_yyensure_buffer_stack (yyscan_t yyscanner );
static void giac_yy_load_buffer_state (yyscan_t yyscanner );
static void giac_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER giac_yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE giac_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *giac_yyalloc (yy_size_t ,yyscan_t yyscanner );
void *giac_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void giac_yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer giac_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        giac_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        giac_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define giac_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 401
#define YY_END_OF_BUFFER 402
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1225] =
    {   0,
        0,    0,   23,   23,    0,    0,    0,    0,    0,    0,
      402,  400,    1,    2,  178,    3,  398,  139,  220,  186,
       31,   90,   91,  206,  180,   88,  201,  209,  215,  371,
      371,   34,   32,   86,  136,   87,   29,  152,  396,  396,
      396,  267,  396,  396,  396,  396,   43,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,   92,
       93,  227,   30,   16,  396,  396,  396,  396,  268,  396,
      396,  396,   38,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  108,  163,  109,   41,  396,
      396,  396,  396,  396,  400,  396,   23,   25,   24,  401,

      399,  401,   15,    6,    5,  401,   18,   17,   19,    1,
      123,    0,    0,    0,    0,    0,    0,    0,    0,  140,
      221,  137,  397,   94,   95,    0,   45,   44,  397,  110,
      111,  158,  210,  211,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  230,  208,
      181,  182,   89,  183,  119,  184,  118,  212,  185,  203,
      173,  217,  392,  231,   22,    0,  216,  390,  371,  372,
        0,    0,    0,    0,    0,    0,   36,   35,  143,    0,
        0,    0,  116,  130,  125,  150,  120,  149,  134,  117,

      151,  153,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  337,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  285,  347,  396,  396,  396,
      396,  168,   50,  396,  396,   49,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  228,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  396,  396,  396,  396,  396,  257,  396,
      396,  396,  396,  396,  338,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,   65,  284,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  308,  396,

       47,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  164,   33,  396,  189,  190,
      396,   60,   39,   37,   48,  396,  396,  396,  396,  396,
      396,  396,    0,  396,   23,   24,   24,   26,    0,  399,
       15,    4,   14,    7,    8,   12,   13,    9,   11,   10,
       18,    0,    0,  382,  383,  381,  385,  384,  386,  222,
      102,  103,   96,   97,  112,  113,  397,  100,  101,   46,
        0,  141,  223,    0,  213,  199,  204,    0,  218,    0,
      131,    0,    0,  138,    0,  133,    0,  156,    0,  232,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  175,  393,    0,    0,   21,  390,  391,
        0,    0,    0,  394,    0,  388,  387,  389,  373,    0,
        0,    0,    0,  159,  179,  396,  396,  396,  360,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  279,
      351,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      356,  396,  302,  396,  396,  396,  396,  396,  396,  396,
      396,  359,  396,  327,  396,  396,  396,  396,  396,  172,
        0,    0,    0,    0,    0,    0,  290,    0,    0,    0,
        0,    0,    0,  167,    0,    0,    0,    0,    0,    0,

        0,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  278,  396,  396,  396,  396,  396,   55,  396,
      396,  396,  295,  396,  396,  224,  303,  396,  301,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  229,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  169,    0,  396,   42,  198,  191,  192,
      193,  194,  195,  196,  269,  148,  365,  370,  202,  187,
       53,  188,  366,  368,  367,  369,  207,  147,  146,  197,

       40,  270,    7,    8,    0,    0,    0,    0,    0,  104,
      105,   98,   99,  114,  115,  124,  160,  176,  144,  128,
      126,  121,  135,  154,    0,    0,  289,    0,    0,    0,
        0,    0,  307,  166,    0,    0,    0,  165,    0,    0,
      392,    0,  391,    0,    0,    0,  390,    0,    0,  395,
        0,  374,    0,   20,    0,    0,    0,  396,  263,  264,
      396,  396,  396,  396,  396,  396,  354,  396,  396,  349,
      357,  280,  396,  396,  396,  396,  396,  287,  294,  350,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      339,  396,  334,  396,  396,  162,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  226,    0,  305,    0,    0,
        0,    0,    0,    0,    0,  170,  396,  396,  396,  396,
      396,  396,  396,  396,  261,  396,  396,  396,  396,    0,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  286,  396,  396,  396,   62,  396,
      396,  396,  396,  396,  396,  396,  396,  396,   73,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  325,  396,
      326,  396,   63,   64,  396,  396,  329,  396,  396,  396,
      396,  396,  396,  396,  396,  396,    0,  396,    7,    0,
        0,  106,  107,  161,    0,    0,    0,    0,  225,  304,

        0,    0,  171,    0,  393,    0,    0,    0,  390,    0,
        0,  391,    0,    0,  345,  344,  346,  262,  353,  265,
      396,  396,  396,  396,  396,  274,  396,  396,  396,  396,
      396,  396,  316,  355,  341,  396,  396,  396,  396,  363,
      396,  343,  336,  352,    0,    0,    0,    0,    0,    0,
        0,  132,    0,  214,  200,    0,    0,    0,    0,    0,
        0,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,    0,    0,    0,  396,  271,  273,  272,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,   70,   67,   66,  396,  396,  396,  396,  396,

      396,  311,  396,  396,  396,  396,  396,  396,  314,  396,
      396,  396,  396,  396,  396,   83,  396,  396,  396,  396,
      396,  396,  396,  396,   59,  396,  396,  396,  396,  335,
        0,  396,   27,   28,  254,  288,    0,    0,    0,    0,
        0,  391,    0,    0,  396,  240,  358,  234,  396,  236,
      396,  396,  396,  396,  362,  320,  323,  396,  348,  396,
      328,    0,    0,  122,    0,  155,    0,    0,  300,  233,
      177,    0,    0,    0,  332,  396,  396,  396,  251,  255,
      258,  396,  396,  396,  297,   76,  266,  282,  281,    0,
      396,  396,  275,  276,  396,  396,  396,  396,   69,  396,

      396,  396,  396,  396,  396,  396,  246,  396,  310,  396,
      396,   75,   78,  396,  396,  396,  396,  318,  396,  396,
      321,  396,  396,  296,  396,  330,  298,  396,  396,  396,
      396,  396,  396,   54,   84,   85,    0,  299,    0,  331,
      375,  396,  396,  396,  235,  237,  396,  342,  396,  145,
      219,    0,    0,    0,  142,    0,    0,  396,  396,  396,
      253,  256,  259,   79,  396,  396,    0,  249,  396,  396,
      309,   81,   74,  396,  396,  396,  396,   72,  396,  306,
      396,  396,  396,  396,  396,  396,  396,  319,  396,  396,
      396,  396,  241,  396,  396,  396,   71,  333,    0,  324,

      376,  396,  340,  238,  396,  396,  157,    0,  129,    0,
      127,  396,  396,  396,  396,  396,  283,  396,  277,  396,
      291,   52,  174,  396,   61,  396,   57,  396,  396,  252,
      317,  322,  396,  396,  396,  315,  396,  396,    0,    0,
        0,  361,  239,  364,    0,  205,  396,  396,  396,  260,
      396,  396,  396,   77,   58,  396,   82,  396,   68,  396,
      396,  396,  396,    0,  379,    0,  293,  396,  396,  396,
      396,  396,  396,  312,  396,  396,  396,  396,  396,  292,
        0,  377,  396,  396,  244,  396,  396,   51,  396,  396,
      396,  396,  396,    0,  378,  396,  243,  247,  396,  396,

      396,   80,   56,  396,  380,  396,  396,  250,  396,  313,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      248,  242,  245,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       41,   48,   49,   50,   51,   52,   53,   54,   41,   41,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,

       65,   66,   67,   68,   69,   41,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   41,   85,   86,   87,   41,    1,   88,   89,   90,
       91,   92,   93,   94,   41,   95,   96,   97,   41,   41,
       41,   41,   98,   41,   41,   99,   41,   41,   41,  100,
      101,   41,   41,  102,   41,   41,   41,  103,   41,  104,
      105,  106,   41,  107,  108,  109,  110,   41,   41,   41,
      111,   41,   41,   41,  112,  113,  114,  115,  116,  117,
      118,  119,  120,  121,  122,  123,   41,   41,   41,   41,
      124,   41,   41,  125,  126,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,  127,  128,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,  129,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,  130,  131,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,    1
    } ;

static yyconst flex_int32_t yy_meta[132] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    4,    4,    1,
        1,    1,    1,    5,    1,    1,    1,    1,    1,    6,
        6,    6,    6,    6,    1,    1,    1,    4,    1,    6,
        1,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    4,    3,    4,    1,    7,    8,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    4,    1,    4,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    1,
        7
    } ;

static yyconst flex_int16_t yy_base[1242] =
    {   0,
        0,    0,  129,  130,  131,  132,  133,  134,  135,  138,
     1883, 1884,  145, 1884, 1854, 1884,  187, 1884,  171,  138,
      266, 1884, 1884,  128,  135, 1865,  137,  154,  139,  242,
      164,  284, 1884,  132,  164,  177, 1884,  194,  110, 1832,
      195,  246,  114,  157, 1805,  200,  176,    0, 1838,  171,
     1831, 1828,  237,  231,  198,  190, 1843,  200, 1828, 1884,
     1884, 1859,  297, 1884,  255,  183,   77,  225,  306,  255,
      241, 1811,  281,  248,  290,  311, 1796,  324,  335,  342,
      276,  275,  276, 1802, 1795, 1884, 1782, 1884,    0,  298,
      236,  244, 1779,  329, 1778, 1777,    0, 1884,  359, 1861,

     1884, 1884,    0, 1884, 1857,  410,    0, 1884, 1884,  390,
     1884, 1847, 1844,  416,  434,  483,  501,  421,  550, 1884,
      407, 1884,    0, 1884, 1884,  288,    0,    0, 1791, 1884,
     1884, 1884, 1884, 1884, 1831, 1847, 1846, 1846, 1844, 1843,
     1842, 1834, 1840, 1822,  482,  417,  463,  404, 1838,  311,
      333,  391, 1774,  104, 1782, 1773, 1771, 1758, 1884, 1884,
     1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,
     1825, 1884,  568, 1884, 1884, 1839, 1884,  573,  599,  237,
      619,  293,  506,  624, 1728, 1821, 1884, 1884, 1884, 1759,
     1761, 1757, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,

      519, 1884,    0, 1801, 1757, 1798, 1784, 1787, 1760, 1767,
      430, 1791,    0,  540, 1754, 1779, 1757, 1777, 1747, 1744,
      214, 1748, 1752, 1746, 1758, 1768,    0, 1774, 1745, 1741,
     1764,    0, 1770, 1764, 1731,    0, 1735,  438,  433, 1727,
     1770, 1757, 1723, 1726, 1756, 1763, 1733, 1753, 1884,  477,
     1731, 1723,  495,  486, 1733,  557, 1723, 1719,  482, 1734,
      421, 1721, 1719, 1721, 1724, 1715, 1726, 1710,    0, 1724,
     1712,  482, 1708, 1707,    0, 1719, 1704, 1701,  398, 1709,
     1704, 1709, 1697,  504, 1714, 1701, 1703, 1884,  452,  583,
      527, 1706, 1693, 1698, 1706, 1702,  278, 1697,  382, 1693,

        0,  528, 1687,  581, 1691, 1687, 1690,  482, 1700, 1687,
     1687, 1687, 1689,  500, 1684, 1679, 1693, 1681, 1676,  590,
     1687, 1688, 1673, 1680, 1671, 1884,    0, 1743,    0,    0,
     1621,    0,    0,    0,    0,  552, 1633, 1645,  593,  520,
     1642,  487, 1650,  541,    0,  611,  661, 1884, 1738, 1884,
        0, 1884, 1884,  679,  685, 1884, 1884, 1884, 1884, 1884,
        0, 1725, 1722,  693, 1884, 1884,  711,  656,  760,  751,
     1884, 1884, 1884, 1884, 1884, 1884,    0, 1884, 1884,    0,
     1727, 1884, 1884, 1726, 1884, 1884, 1884, 1725, 1884, 1724,
     1884, 1723, 1722, 1884, 1721, 1884, 1720, 1884, 1719, 1884,

     1665, 1661,  670, 1648, 1653, 1661, 1645, 1712, 1711, 1642,
     1651, 1642, 1707, 1884,  646,  792, 1714, 1884,  781,  657,
      820,  830,  716,  745,  847,  557,  698,  854,  765, 1713,
     1642, 1647, 1640,    0,    0, 1680, 1675, 1660,    0, 1638,
     1657, 1657, 1666, 1634, 1635, 1628, 1627, 1655, 1621,    0,
        0, 1625, 1648, 1630, 1624, 1628, 1617, 1620, 1656, 1648,
        0, 1615,    0, 1649, 1650, 1609, 1606, 1649, 1633, 1603,
     1602,    0, 1637, 1621, 1600, 1607, 1628, 1633, 1604,    0,
     1610, 1595, 1591, 1591, 1596, 1604, 1884, 1589,  632, 1594,
     1602, 1594, 1585, 1884, 1583, 1580, 1588, 1584, 1597,  762,

     1581, 1598, 1585, 1578,  755, 1574, 1583, 1589, 1576, 1519,
     1568, 1579, 1643, 1577, 1584, 1566, 1569, 1577,  717, 1563,
     1571, 1575,    0, 1563, 1557, 1570, 1572, 1569, 1564, 1567,
     1566, 1551,    0, 1552, 1548,    0,    0, 1555,    0, 1567,
     1548, 1555, 1558, 1543, 1543, 1565, 1546, 1534,    0, 1555,
     1549, 1551, 1549,  775, 1552, 1533, 1552, 1545, 1544, 1553,
     1552, 1475, 1540, 1526, 1472, 1537, 1523, 1535, 1530, 1521,
     1518, 1529, 1524,    0, 1465, 1484,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1884,

        0,    0,  859,  876, 1577, 1576, 1573, 1572,  729, 1884,
     1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,
     1884, 1884, 1884, 1884, 1577, 1509, 1884, 1521, 1520, 1504,
     1572, 1571, 1884, 1884, 1501, 1506, 1568, 1884,  886,  903,
      908,  918,  658,  932,  942,  949,  959,  969,  978,  988,
      998, 1003, 1575, 1884, 1514, 1504, 1512, 1532,    0,    0,
     1508, 1534, 1539, 1520, 1495, 1489,    0, 1532, 1518,    0,
        0,    0, 1494, 1489, 1494, 1490, 1494,    0,    0,    0,
     1511, 1523, 1493, 1482, 1524, 1507, 1489, 1476, 1520, 1511,
        0, 1485,    0, 1513, 1483, 1884, 1478, 1477, 1484, 1471,

     1465, 1477, 1465, 1462, 1459, 1884, 1459, 1884, 1459, 1471,
     1468, 1467, 1454, 1456, 1457, 1884, 1451, 1464, 1454, 1453,
     1457, 1464, 1452, 1447,    0, 1451, 1433, 1455, 1438,  964,
     1447, 1446, 1451, 1438, 1437, 1440, 1435, 1432, 1439, 1444,
     1435, 1432, 1435, 1426,    0, 1431, 1426, 1447,  808, 1432,
     1422, 1438, 1424, 1436, 1422, 1429, 1428, 1434, 1884, 1413,
      808, 1430, 1425,  787,  453, 1409, 1411, 1432,    0, 1420,
        0, 1412, 1884, 1884, 1396, 1422, 1408, 1393, 1419, 1401,
     1412, 1410, 1417, 1401, 1394, 1408, 1377, 1346, 1014,  755,
      783, 1884, 1884, 1884, 1459, 1458, 1391, 1389, 1884, 1884,

     1389, 1392, 1884, 1020, 1025, 1035, 1045, 1050, 1055, 1065,
     1070, 1075, 1085, 1376, 1884, 1884, 1884,    0,    0,    0,
     1420, 1413, 1394, 1382, 1385,    0, 1393, 1386, 1377, 1394,
     1374, 1403,    0,    0,    0, 1402, 1406, 1372, 1376, 1405,
     1391,    0,    0,    0, 1361, 1344, 1322, 1329, 1308, 1299,
     1291, 1884, 1290, 1884, 1884, 1286, 1297, 1262, 1249, 1245,
     1251, 1246, 1263, 1238, 1242, 1246, 1245, 1252, 1236, 1250,
     1221, 1258, 1247, 1237, 1244, 1232, 1234,    0,    0,    0,
     1248, 1242, 1226, 1227, 1232, 1225, 1222, 1245, 1230, 1224,
     1228, 1215, 1884, 1884, 1884, 1212, 1235, 1222, 1219, 1212,

     1217,    0, 1209, 1219, 1232, 1231, 1221, 1225,    0, 1209,
     1217, 1201, 1214, 1201, 1204, 1884, 1196, 1196,  298,  363,
      455,  487,  535,  563,    0,  639,  676,  674,  681,    0,
      650,  707,  756,  793, 1884, 1884,  741,  819,  759,  828,
     1091, 1096, 1106,  733,  818,    0,    0,    0,  777,    0,
      796,  794,  805,  831,    0,    0,    0,  814,    0,  854,
        0,  829,  839, 1884,  844, 1884,  833,  851, 1884, 1884,
     1884,  840,  853,  860, 1884,  865,  859,  878,  875,  876,
      877,  891,  874,  867,    0, 1884,    0, 1884, 1884,  884,
      887,  894,    0,    0,  898,  909,  920,  921, 1884,  904,

      908,  908,  927,  939,  926,  930,    0,  929,    0,  931,
      932, 1884, 1884,  929,  949,  939,  952,    0,  952,  957,
        0,  958,  963,    0,  973,    0,    0,  975,  987,  996,
      988, 1009, 1018, 1884,    0,    0, 1019, 1884, 1090, 1884,
     1113, 1054, 1031, 1039,    0,    0, 1057,    0, 1076, 1884,
     1884, 1052, 1073, 1068, 1884, 1077, 1070, 1075, 1082, 1072,
        0,    0,    0, 1884, 1066, 1087, 1084,    0, 1087, 1087,
        0, 1884, 1884, 1085, 1073, 1068, 1082, 1884, 1081,    0,
     1078, 1093, 1091, 1093, 1084, 1088, 1097,    0, 1097, 1100,
     1098, 1097,    0, 1093, 1103, 1103, 1884,    0, 1106, 1884,

     1152, 1121,    0,    0, 1112, 1128, 1884, 1116, 1884, 1101,
     1884, 1122, 1118, 1109, 1119, 1113, 1884, 1114,    0, 1132,
        0,    0,    0, 1122,    0, 1167,    0, 1135, 1113,    0,
        0,    0, 1137, 1124, 1130,    0, 1137, 1120, 1119, 1179,
     1116,    0,    0,    0, 1126, 1884, 1128, 1138, 1144,    0,
     1135, 1149, 1139, 1884,    0, 1148, 1884, 1144, 1884, 1151,
     1150, 1147, 1156, 1207, 1199, 1108, 1884, 1151, 1165, 1162,
     1164, 1152, 1169,    0, 1160, 1173, 1154, 1161, 1156, 1884,
     1148, 1217, 1171, 1170,    0, 1179, 1176,    0, 1172, 1181,
     1193, 1183, 1176, 1135, 1232, 1177,    0,    0, 1197, 1186,

     1186, 1884,    0, 1184, 1884, 1183, 1201,    0, 1187,    0,
     1196, 1195, 1195, 1194, 1204, 1209, 1198, 1194, 1194, 1196,
        0,    0,    0, 1884, 1328, 1336, 1344, 1352, 1357, 1359,
     1366, 1374, 1382, 1390, 1398, 1406, 1408, 1415, 1423, 1431,
     1439
    } ;

static yyconst flex_int16_t yy_def[1242] =
    {   0,
     1224,    1, 1225, 1225, 1226, 1226, 1227, 1227, 1228, 1228,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1229, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224,
     1224, 1224, 1224, 1224, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1224, 1224, 1224, 1230, 1230,
     1230, 1230, 1230, 1230, 1224, 1230, 1231, 1224, 1232, 1233,

     1224, 1224, 1234, 1224, 1224, 1235, 1236, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1237, 1224, 1224, 1224, 1237, 1237, 1237, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1238, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1224, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1224, 1230, 1231, 1232, 1232, 1224, 1233, 1224,
     1234, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1236, 1239, 1240, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1237, 1224, 1224, 1237,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1238, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1241,
     1224, 1224, 1224, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1224, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224,

     1230, 1230, 1224, 1224, 1239, 1239, 1240, 1240, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1241, 1224, 1224, 1224, 1224, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1224, 1224, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1224, 1230, 1224, 1239,
     1240, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1224, 1224, 1224, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1224, 1224, 1224, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1224, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1224, 1230, 1239, 1240, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1224, 1230, 1224, 1224, 1224,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1224, 1224, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1224, 1230, 1230, 1224, 1224, 1224, 1224,
     1224, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1230, 1230, 1230,
     1230, 1230, 1230, 1224, 1230, 1230, 1224, 1230, 1230, 1230,
     1230, 1224, 1224, 1230, 1230, 1230, 1230, 1224, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1224, 1230, 1224, 1224,

     1224, 1230, 1230, 1230, 1230, 1230, 1224, 1224, 1224, 1224,
     1224, 1230, 1230, 1230, 1230, 1230, 1224, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224, 1224,
     1224, 1230, 1230, 1230, 1224, 1224, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1224, 1230, 1230, 1224, 1230, 1224, 1230,
     1230, 1230, 1230, 1224, 1224, 1224, 1224, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224,
     1224, 1224, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1224, 1224, 1230, 1230, 1230, 1230, 1230,

     1230, 1224, 1230, 1230, 1224, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230,    0, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224
    } ;

static yyconst flex_int16_t yy_nxt[2016] =
    {   0,
       12,   13,   14,   13,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   31,   31,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   48,   51,   52,   53,   54,   55,   56,
       48,   57,   58,   59,   60,   13,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   48,
       74,   75,   76,   77,   78,   48,   79,   80,   81,   82,
       83,   84,   85,   48,   86,   87,   88,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,

       48,   48,   48,   48,   89,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   90,   91,   92,   93,   94,   95,
       96,   98,   98,  101,  101,  104,  104,  108,  105,  105,
      108,  159,   99,   99,  102,  102,  110,  132,  110,  161,
      272,  133,  175,  164,  204,  160,  273,  176,  193,  194,
      195,  216,  162,  165,  166,  167,  177,  168,  169,  408,
      170,  171,  172,  173,  173,  173,  173,  173,  120,  121,
      409,  178,  205,  179,  179,  179,  179,  179,  106,  106,
      196,  197,  198,  180,  109,  134,  217,  109,  122,  181,

      110,  112,  218,  113,  199,  200,  114,  114,  115,  115,
      116,  174,  226,  201,  201,  201,  201,  201,  116,  116,
      116,  116,  116,  116,  202,  124,  207,  125,  181,  126,
      219,  221,  229,  222,  223,  127,  224,  241,  246,  128,
      208,  227,  225,  270,  230,  129,  242,  116,  117,  116,
      116,  116,  116,  271,  243,  130,  453,  131,  244,  178,
      118,  179,  179,  179,  179,  179,  238,  247,  209,  119,
      135,  180,  422,  136,  137,  138,  233,  181,  210,  139,
      140,  211,  141,  142,  143,  212,  454,  234,  185,  274,
      144,  213,  145,  146,  147,  239,  148,  235,  275,  378,

      379,  422,  186,  182,  240,  236,  181,  285,  187,  188,
      237,  189,  426,  426,  214,  183,  291,  286,  282,  283,
      190,  292,  215,  149,  184,  264,  150,  265,  284,  266,
      191,  267,  268,  269,  151,  288,  318,  152,  153,  154,
      322,  331,  155,  319,  323,  156,  289,  320,  157,  192,
      293,  158,  321,  290,  538,  333,  539,  250,  294,  332,
      251,  252,  253,  295,  334,  254,  185,  255,  256,  257,
      258,  259,  347,  260,  261,  296,  262,  348,  276,  263,
      277,  278,  279,  401,  297,  280,  300,  402,  281,  298,
     1024,  110,  301,  110,  302,  307,  303,  304,  403,  308,

      305,  309,  312,  306,  313,  404,  314,  327,  310,  311,
      315,  328,  329,  330,  398,  370,  316,  336,  371,  372,
      337,  317,  338,  339,  340,  341, 1025,  394,  342,  354,
      354,  354,  354,  355,  399,  114,  114,  115,  115,  116,
      368,  368,  368,  368,  395,  110,  541,  116,  116,  116,
      116,  116,  116,  115,  115,  115,  115,  116,  516,  405,
      542,  373,  441,  374,  406,  116,  116,  116,  116,  116,
      116,  356,  442,  396,  517,  357,  116,  364,  116,  116,
      116,  116,  358,  365,  468,  498,  359,  469,  360,  366,
      397,  375,  391,  376,  116,  116,  116,  116,  116,  116,

      499,  365,  116,  116,  116,  116,  116,  366,  470,  392,
      393,  471,  527,  912,  116,  116,  116,  116,  116,  116,
      367,  367,  116,  116,  116,  427,  427,  427,  427, 1026,
      528,  913,  116,  116,  116,  116,  116,  116,  201,  201,
      201,  201,  201,  116,  116,  116,  116,  116,  116,  481,
      365,  487,  495,  509,  482,  496,  553,  485,  488,  510,
      554,  116,  116,  116,  116,  116,  116,  486,  365,  369,
      369,  369,  369,  369,  522,  560,  426,  426,  561, 1027,
      523,  369,  369,  369,  369,  369,  369,  173,  173,  173,
      173,  173,  419,  419,  419,  419,  419,  415, 1028,  531,

      444,  544,  420,  416,  532,  598,  445,  545,  421,  599,
      369,  369,  369,  369,  369,  369,  178,  446,  179,  179,
      179,  179,  179,  594, 1224,  490,  595,  596,  180, 1224,
      491, 1029,  416,  423,  181,  423,  492,  421,  424,  424,
      424,  424,  424,  428,  428,  428,  428,  428,  529,  547,
      567,  548,  601,  568,  425,  428,  428,  428,  428,  428,
      428,  530,  549,  181,  602,  577,  578,  569,  579,  580,
      581,  582,  583,  584,  347,  368,  368,  368,  368,  348,
      627,  639,  587,  425,  428,  428,  428,  428,  428,  428,
      588,  589,  645,  807,  590,  591,  703,  592,  603,  603,

      603,  603,  604,  593,  604,  604,  604,  604,  604,  704,
      639, 1030,  116,  116,  116,  116,  116,  427,  427,  427,
      427,  645,  807,  185,  116,  116,  116,  116,  116,  116,
      367,  367,  116,  116,  116,  424,  424,  424,  424,  424,
      792,  793,  116,  116,  116,  116,  116,  116,  628, 1031,
     1032, 1033, 1034,  116,  116,  116,  116,  116,  116,  609,
      365,  933,  610,  611,  424,  424,  424,  424,  424,  790,
      606,  116,  116,  116,  116,  116,  116,  736,  365,  369,
      369,  369,  369,  369,  652,  652,  652,  652,  652,  934,
      737,  369,  369,  369,  369,  369,  369, 1035, 1036,  791,

      419,  419,  419,  419,  419,  612,  640,  613,  640,  608,
      643,  641,  641,  641,  641,  641,  644,  720, 1037,  894,
      369,  369,  369,  369,  369,  369,  714,  642,  906, 1038,
      715, 1039,  721,  722,  646,  614,  646,  615, 1040,  647,
      647,  647,  647,  647,  649,  644,  649, 1041,  766,  650,
      650,  650,  650,  650,  767,  648,  642, 1042, 1043,  910,
     1044,  423,  895,  423,  911,  651,  424,  424,  424,  424,
      424, 1045,  907,  428,  428,  428,  428,  428,  789,  789,
      789,  789,  604, 1046,  648,  428,  428,  428,  428,  428,
      428, 1047, 1048, 1049,  651,  604,  604,  604,  604,  604,

      804, 1050,  804, 1051, 1052,  805,  805,  805,  805,  805,
     1053, 1054, 1055, 1056,  428,  428,  428,  428,  428,  428,
     1057,  806,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  640, 1058,  640, 1059, 1060,  641,  641,  641,
      641,  641, 1061, 1062, 1063, 1064,  808, 1065,  808, 1066,
      806,  809,  809,  809,  809,  809,  811, 1067,  811, 1068,
     1069,  812,  812,  812,  812,  812, 1070,  810,  647,  647,
      647,  647,  647, 1071, 1072, 1073, 1074,  813,  647,  647,
      647,  647,  647,  646, 1075,  646, 1076, 1077,  647,  647,
      647,  647,  647, 1078, 1079, 1080,  810,  650,  650,  650,

      650,  650, 1081, 1082, 1083, 1084,  813,  650,  650,  650,
      650,  650,  649, 1085,  649, 1086, 1087,  650,  650,  650,
      650,  650,  652,  652,  652,  652,  652,  874, 1088, 1089,
     1090, 1091,  875,  604,  604,  604,  604,  604,  876,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  804,
     1092,  804, 1093, 1094,  805,  805,  805,  805,  805,  941,
     1095,  941, 1096, 1097,  942,  942,  942,  942,  942,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  808,
      943,  808, 1098, 1099,  809,  809,  809,  809,  809,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  811,

     1100,  811, 1102, 1103,  812,  812,  812,  812,  812,  943,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      941, 1104,  941, 1105, 1106,  942,  942,  942,  942,  942,
     1107,  814, 1101, 1101, 1101, 1101, 1101, 1108, 1109, 1110,
     1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
     1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
     1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
     1142, 1101, 1101, 1101, 1101, 1101, 1143, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157,
     1158, 1159, 1160, 1152, 1161, 1162, 1163, 1164, 1165, 1165,

     1165, 1165, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
     1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1165, 1165,
     1165, 1165, 1165, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
     1189, 1190, 1191, 1192, 1193, 1194, 1195, 1195, 1195, 1195,
     1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
     1205, 1195, 1195, 1195, 1195, 1195, 1206, 1207, 1208, 1209,
     1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
     1220, 1221, 1222, 1223, 1023, 1022, 1021, 1020, 1019, 1018,
     1141, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009,
     1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000,  999,

      998,  997,  996,  995,  994,  993,  992,  991,  990,  989,
      988,  987,  986,  985,  984,  983,  982,  981,  980,  979,
      978,  977,  976,  975,  974,  973,  972, 1181,   97,   97,
       97,   97,   97,   97,   97,   97,  100,  100,  100,  100,
      100,  100,  100,  100,  103,  103,  103,  103,  103,  103,
      103,  103,  107,  107,  107,  107,  107,  107,  107,  107,
      123,  971,  970,  123,  203,  203,  345,  969,  345,  345,
      968,  345,  345,  345,  346,  967,  346,  346,  346,  346,
      346,  346,  349,  349,  349,  349,  966,  349,  349,  349,
      351,  965,  964,  351,  351,  351,  351,  351,  353,  353,

      353,  353,  353,  353,  353,  353,  361,  963,  361,  361,
      361,  361,  361,  377,  377,  417,  417,  417,  417,  417,
      417,  417,  417,  605,  605,  605,  605,  962,  605,  605,
      605,  607,  607,  607,  607,  961,  607,  607,  607,  653,
      653,  653,  653,  653,  653,  653,  653,  960,  959,  958,
      957,  956,  955,  954,  953,  952,  951,  950,  949,  948,
      947,  946,  945,  944,  940,  939,  938,  937,  936,  935,
      932,  931,  930,  929,  928,  927,  926,  925,  924,  923,
      922,  921,  920,  919,  918,  917,  916,  915,  914,  909,
      908,  905,  904,  903,  902,  901,  900,  899,  898,  897,

      896,  893,  892,  891,  890,  889,  888,  887,  886,  885,
      884,  883,  882,  881,  880,  879,  878,  877,  873,  872,
      871,  870,  869,  868,  867,  866,  865,  864,  863,  862,
      861,  860,  859,  858,  857,  856,  855,  854,  853,  852,
      851,  850,  849,  848,  847,  846,  845,  844,  843,  842,
      841,  840,  839,  838,  837,  836,  835,  834,  833,  832,
      831,  830,  829,  828,  827,  826,  825,  824,  823,  822,
      821,  820,  819,  818,  817,  816,  815,  654,  803,  802,
      801,  800,  799,  798,  797,  796,  795,  794,  791,  608,
      790,  606,  788,  787,  786,  785,  784,  783,  782,  781,

      780,  779,  778,  777,  776,  775,  774,  773,  772,  771,
      770,  769,  768,  765,  764,  763,  762,  761,  760,  759,
      758,  757,  756,  755,  754,  753,  752,  751,  750,  749,
      748,  747,  746,  745,  744,  743,  742,  741,  740,  739,
      738,  735,  734,  733,  732,  731,  730,  729,  728,  727,
      726,  725,  724,  723,  719,  718,  717,  716,  713,  712,
      711,  710,  709,  708,  707,  706,  705,  702,  701,  700,
      699,  698,  697,  696,  695,  694,  693,  692,  691,  690,
      689,  688,  687,  686,  685,  684,  683,  682,  681,  680,
      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,

      669,  668,  667,  666,  665,  664,  663,  662,  661,  660,
      659,  658,  657,  656,  655,  654,  418,  638,  637,  636,
      635,  634,  633,  632,  631,  630,  629,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  616,  608,  606,
      350,  600,  597,  586,  585,  576,  575,  574,  573,  572,
      571,  570,  566,  565,  564,  563,  562,  559,  558,  557,
      556,  555,  552,  551,  550,  546,  543,  540,  537,  536,
      535,  534,  533,  526,  525,  524,  521,  520,  519,  518,
      515,  514,  513,  512,  511,  508,  507,  506,  505,  504,
      503,  502,  501,  500,  497,  494,  493,  489,  484,  483,

      480,  479,  478,  477,  476,  475,  474,  473,  472,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  452,  451,  450,  449,  448,  447,  443,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  418,  414,  413,  412,  411,  410,  407,  400,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      363,  362,  352,  350,  344,  343,  335,  326,  325,  324,
      299,  287,  249,  248,  245,  232,  231,  228,  220,  206,
      163,  111, 1224,   11, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224
    } ;

static yyconst flex_int16_t yy_chk[2016] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,    7,    8,    9,    7,    8,
       10,   24,    3,    4,    5,    6,   13,   20,   13,   25,
       67,   20,   29,   27,   39,   24,   67,   29,   34,   34,
       34,   43,   25,   27,   27,   27,   29,   28,   28,  154,
       28,   28,   28,   28,   28,   28,   28,   28,   19,   19,
      154,   31,   39,   31,   31,   31,   31,   31,    7,    8,
       35,   35,   35,   31,    9,   20,   43,   10,   19,   31,

       13,   17,   44,   17,   36,   36,   17,   17,   17,   17,
       17,   28,   47,   38,   38,   38,   38,   38,   17,   17,
       17,   17,   17,   17,   38,   19,   41,   19,   31,   19,
       44,   46,   50,   46,   46,   19,   46,   55,   58,   19,
       41,   47,   46,   66,   50,   19,   55,   17,   17,   17,
       17,   17,   17,   66,   56,   19,  221,   19,   56,   30,
       17,   30,   30,   30,   30,   30,   54,   58,   41,   17,
       21,   30,  180,   21,   21,   21,   53,   30,   41,   21,
       21,   42,   21,   21,   21,   42,  221,   53,   31,   68,
       21,   42,   21,   21,   21,   54,   21,   53,   68,  126,

      126,  180,   32,   30,   54,   53,   30,   71,   32,   32,
       53,   32,  182,  182,   42,   30,   74,   71,   70,   70,
       32,   74,   42,   21,   30,   65,   21,   65,   70,   65,
       32,   65,   65,   65,   21,   73,   81,   21,   21,   21,
       83,   91,   21,   81,   83,   21,   73,   82,   21,   32,
       75,   21,   82,   73,  297,   92,  297,   63,   75,   91,
       63,   63,   63,   75,   92,   63,   30,   63,   63,   63,
       63,   63,   99,   63,   63,   76,   63,   99,   69,   63,
       69,   69,   69,  150,   76,   69,   78,  150,   69,   76,
      919,  110,   78,  110,   78,   79,   78,   78,  151,   79,

       78,   79,   80,   78,   80,  151,   80,   90,   79,   79,
       80,   90,   90,   90,  148,  121,   80,   94,  121,  121,
       94,   80,   94,   94,   94,   94,  920,  146,   94,  106,
      106,  106,  106,  106,  148,  114,  114,  114,  114,  114,
      118,  118,  118,  118,  146,  110,  299,  114,  114,  114,
      114,  114,  114,  115,  115,  115,  115,  115,  279,  152,
      299,  121,  211,  121,  152,  115,  115,  115,  115,  115,
      115,  106,  211,  147,  279,  106,  114,  114,  114,  114,
      114,  114,  106,  114,  238,  261,  106,  238,  106,  114,
      147,  121,  145,  121,  115,  115,  115,  115,  115,  115,

      261,  115,  116,  116,  116,  116,  116,  115,  239,  145,
      145,  239,  289,  765,  116,  116,  116,  116,  116,  116,
      117,  117,  117,  117,  117,  183,  183,  183,  183,  921,
      289,  765,  117,  117,  117,  117,  117,  117,  201,  201,
      201,  201,  201,  116,  116,  116,  116,  116,  116,  250,
      116,  254,  259,  272,  250,  259,  308,  253,  254,  272,
      308,  117,  117,  117,  117,  117,  117,  253,  117,  119,
      119,  119,  119,  119,  284,  314,  426,  426,  314,  922,
      284,  119,  119,  119,  119,  119,  119,  173,  173,  173,
      173,  173,  178,  178,  178,  178,  178,  173,  923,  291,

      214,  302,  178,  173,  291,  342,  214,  302,  178,  342,
      119,  119,  119,  119,  119,  119,  179,  214,  179,  179,
      179,  179,  179,  340,  346,  256,  340,  340,  179,  346,
      256,  924,  173,  181,  179,  181,  256,  178,  181,  181,
      181,  181,  181,  184,  184,  184,  184,  184,  290,  304,
      320,  304,  344,  320,  181,  184,  184,  184,  184,  184,
      184,  290,  304,  179,  344,  336,  336,  320,  336,  336,
      336,  336,  336,  336,  347,  368,  368,  368,  368,  347,
      403,  415,  339,  181,  184,  184,  184,  184,  184,  184,
      339,  339,  420,  643,  339,  339,  489,  339,  354,  354,

      354,  354,  354,  339,  355,  355,  355,  355,  355,  489,
      415,  926,  364,  364,  364,  364,  364,  427,  427,  427,
      427,  420,  643,  179,  364,  364,  364,  364,  364,  364,
      367,  367,  367,  367,  367,  423,  423,  423,  423,  423,
      609,  609,  367,  367,  367,  367,  367,  367,  403,  927,
      928,  929,  931,  364,  364,  364,  364,  364,  364,  370,
      364,  790,  370,  370,  424,  424,  424,  424,  424,  790,
      933,  367,  367,  367,  367,  367,  367,  519,  367,  369,
      369,  369,  369,  369,  429,  429,  429,  429,  429,  791,
      519,  369,  369,  369,  369,  369,  369,  932,  932,  791,

      419,  419,  419,  419,  419,  370,  416,  370,  416,  934,
      419,  416,  416,  416,  416,  416,  419,  505,  937,  749,
      369,  369,  369,  369,  369,  369,  500,  416,  761,  938,
      500,  939,  505,  505,  421,  370,  421,  370,  940,  421,
      421,  421,  421,  421,  422,  419,  422,  944,  554,  422,
      422,  422,  422,  422,  554,  421,  416,  945,  949,  764,
      951,  425,  749,  425,  764,  422,  425,  425,  425,  425,
      425,  952,  761,  428,  428,  428,  428,  428,  603,  603,
      603,  603,  603,  953,  421,  428,  428,  428,  428,  428,
      428,  954,  958,  960,  422,  604,  604,  604,  604,  604,

      639,  962,  639,  963,  965,  639,  639,  639,  639,  639,
      967,  968,  972,  973,  428,  428,  428,  428,  428,  428,
      974,  639,  640,  640,  640,  640,  640,  641,  641,  641,
      641,  641,  642,  976,  642,  977,  978,  642,  642,  642,
      642,  642,  979,  980,  981,  982,  644,  983,  644,  984,
      639,  644,  644,  644,  644,  644,  645,  990,  645,  991,
      992,  645,  645,  645,  645,  645,  995,  644,  646,  646,
      646,  646,  646,  996,  997,  998, 1000,  645,  647,  647,
      647,  647,  647,  648, 1001,  648, 1002, 1003,  648,  648,
      648,  648,  648, 1004, 1005, 1006,  644,  649,  649,  649,

      649,  649, 1008, 1010, 1011, 1014,  645,  650,  650,  650,
      650,  650,  651, 1015,  651, 1016, 1017,  651,  651,  651,
      651,  651,  652,  652,  652,  652,  652,  730, 1019, 1020,
     1022, 1023,  730,  789,  789,  789,  789,  789,  730,  804,
      804,  804,  804,  804,  805,  805,  805,  805,  805,  806,
     1025,  806, 1028, 1029,  806,  806,  806,  806,  806,  807,
     1030,  807, 1031, 1032,  807,  807,  807,  807,  807,  808,
      808,  808,  808,  808,  809,  809,  809,  809,  809,  810,
      807,  810, 1033, 1037,  810,  810,  810,  810,  810,  811,
      811,  811,  811,  811,  812,  812,  812,  812,  812,  813,

     1039,  813, 1042, 1043,  813,  813,  813,  813,  813,  807,
      941,  941,  941,  941,  941,  942,  942,  942,  942,  942,
      943, 1044,  943, 1047, 1049,  943,  943,  943,  943,  943,
     1052,  652, 1041, 1041, 1041, 1041, 1041, 1053, 1054, 1056,
     1057, 1058, 1059, 1060, 1065, 1066, 1067, 1069, 1070, 1074,
     1075, 1076, 1077, 1079, 1081, 1082, 1083, 1084, 1085, 1086,
     1087, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1099, 1101,
     1102, 1101, 1101, 1101, 1101, 1101, 1105, 1106, 1108, 1110,
     1112, 1113, 1114, 1115, 1116, 1118, 1120, 1124, 1126, 1128,
     1129, 1133, 1134, 1116, 1135, 1137, 1138, 1139, 1140, 1140,

     1140, 1140, 1140, 1141, 1145, 1147, 1148, 1149, 1151, 1152,
     1153, 1156, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1165,
     1165, 1165, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173,
     1175, 1176, 1177, 1178, 1179, 1181, 1182, 1182, 1182, 1182,
     1182, 1183, 1184, 1186, 1187, 1189, 1190, 1191, 1192, 1193,
     1194, 1195, 1195, 1195, 1195, 1195, 1196, 1199, 1200, 1201,
     1204, 1206, 1207, 1209, 1211, 1212, 1213, 1214, 1215, 1216,
     1217, 1218, 1219, 1220,  918,  917,  915,  914,  913,  912,
     1101,  911,  910,  908,  907,  906,  905,  904,  903,  901,
      900,  899,  898,  897,  896,  892,  891,  890,  889,  888,

      887,  886,  885,  884,  883,  882,  881,  877,  876,  875,
      874,  873,  872,  871,  870,  869,  868,  867,  866,  865,
      864,  863,  862,  861,  860,  859,  858, 1165, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1229,  857,  856, 1229, 1230, 1230, 1231,  853, 1231, 1231,
      851, 1231, 1231, 1231, 1232,  850, 1232, 1232, 1232, 1232,
     1232, 1232, 1233, 1233, 1233, 1233,  849, 1233, 1233, 1233,
     1234,  848,  847, 1234, 1234, 1234, 1234, 1234, 1235, 1235,

     1235, 1235, 1235, 1235, 1235, 1235, 1236,  846, 1236, 1236,
     1236, 1236, 1236, 1237, 1237, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1239, 1239, 1239, 1239,  845, 1239, 1239,
     1239, 1240, 1240, 1240, 1240,  841, 1240, 1240, 1240, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241,  840,  839,  838,
      837,  836,  832,  831,  830,  829,  828,  827,  825,  824,
      823,  822,  821,  814,  802,  801,  798,  797,  796,  795,
      788,  787,  786,  785,  784,  783,  782,  781,  780,  779,
      778,  777,  776,  775,  772,  770,  768,  767,  766,  763,
      762,  760,  758,  757,  756,  755,  754,  753,  752,  751,

      750,  748,  747,  746,  744,  743,  742,  741,  740,  739,
      738,  737,  736,  735,  734,  733,  732,  731,  729,  728,
      727,  726,  724,  723,  722,  721,  720,  719,  718,  717,
      715,  714,  713,  712,  711,  710,  709,  707,  705,  704,
      703,  702,  701,  700,  699,  698,  697,  695,  694,  692,
      690,  689,  688,  687,  686,  685,  684,  683,  682,  681,
      677,  676,  675,  674,  673,  669,  668,  666,  665,  664,
      663,  662,  661,  658,  657,  656,  655,  653,  637,  636,
      635,  632,  631,  630,  629,  628,  626,  625,  608,  607,
      606,  605,  576,  575,  573,  572,  571,  570,  569,  568,

      567,  566,  565,  564,  563,  562,  561,  560,  559,  558,
      557,  556,  555,  553,  552,  551,  550,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  538,  535,  534,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  522,  521,
      520,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  504,  503,  502,  501,  499,  498,
      497,  496,  495,  493,  492,  491,  490,  488,  486,  485,
      484,  483,  482,  481,  479,  478,  477,  476,  475,  474,
      473,  471,  470,  469,  468,  467,  466,  465,  464,  462,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  449,

      448,  447,  446,  445,  444,  443,  442,  441,  440,  438,
      437,  436,  433,  432,  431,  430,  417,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  402,  401,  399,
      397,  395,  393,  392,  390,  388,  384,  381,  363,  362,
      349,  343,  341,  338,  337,  331,  328,  325,  324,  323,
      322,  321,  319,  318,  317,  316,  315,  313,  312,  311,
      310,  309,  307,  306,  305,  303,  300,  298,  296,  295,
      294,  293,  292,  287,  286,  285,  283,  282,  281,  280,
      278,  277,  276,  274,  273,  271,  270,  268,  267,  266,
      265,  264,  263,  262,  260,  258,  257,  255,  252,  251,

      248,  247,  246,  245,  244,  243,  242,  241,  240,  237,
      235,  234,  233,  231,  230,  229,  228,  226,  225,  224,
      223,  222,  220,  219,  218,  217,  216,  215,  212,  210,
      209,  208,  207,  206,  205,  204,  192,  191,  190,  186,
      185,  176,  171,  158,  157,  156,  155,  153,  149,  144,
      143,  142,  141,  140,  139,  138,  137,  136,  135,  129,
      113,  112,  105,  100,   96,   95,   93,   87,   85,   84,
       77,   72,   62,   59,   57,   52,   51,   49,   45,   40,
       26,   15,   11, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "input_lexer.ll"
/* -*- mode: C++; compile-command: "flex input_lexer.ll && make input_lexer.o " -*- */
/* Note: for the nspire port, after flex, move from #ifdef HAVE_CONFIG_H 
   to #include "first.h" before #include<stdio.h> 
   and map "log" to log10 instead of ln
*/
/** @file input_lexer.ll
 *
 *  Lexical analyzer definition for reading expressions.
 *  Note Maple input should be processed replacing # with // and { } for set
 *  This file must be processed with flex. */
/*
 *  Copyright (C) 2001,14 B. Parisse, Institut Fourier, 38402 St Martin d'Heres
 *  The very first version was inspired by GiNaC lexer
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * The lexer will first check for static patterns and strings (defined below)
 * If a match is not found, it calls find_or_make_symbol
 * This function looks first if the string should be translated
 * (e.g. add a prefix from the export table)
 * then look in lexer_functions for a match, then look in sym_tab
 * if not found in sym_tab, a new identificateur is created & added in sym_tab
 * Functions in lexer_functions are added during the construction
 * of the corresponding unary_functions using lexer_functions_register
 */
/*
 *  Definitions
 */
#line 48 "input_lexer.ll"
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "first.h"
#include <iostream>
#include <stdexcept>

#include "gen.h"
#include "input_lexer.h"
#include "help.h"
#include "identificateur.h"
#include "usual.h"
#include "derive.h"
#include "series.h"
#include "intg.h"
#include "sym2poly.h"
#include "moyal.h"
#include "subst.h"
#include "vecteur.h"
#include "modpoly.h"
#include "lin.h"
#include "solve.h"
#include "ifactor.h"
#include "alg_ext.h"
#include "gauss.h"
#include "isom.h"
#include "plot.h"
#include "ti89.h"

#include "prog.h"
#include "rpn.h"
#include "ezgcd.h"
#include "tex.h"
#include "risch.h"
#include "permu.h"
#include "input_parser.h"    

#if defined(RTOS_THREADX) || defined(__MINGW_H) || defined NSPIRE
  int isatty (int ){ return 0; }
#endif

#ifdef NSPIRE
  // after flex, move #include "config.h" and first.h before all includes
  // include "static.h" then giacPCH.h
  // then edit input_lexer.cc and search for isatty, replace by 0 for interactive
  void clearerr(FILE *){}
#endif

  using namespace std;
  using namespace giac;
  void giac_yyset_column (int  column_no , yyscan_t yyscanner);
  int giac_yyget_column (yyscan_t yyscanner);
#define YY_USER_ACTION giac_yyset_column(giac_yyget_column(yyscanner)+yyleng,yyscanner);
#define YY_USER_INIT giac_yyset_column(1,yyscanner);

#ifndef NO_NAMESPACE_GIAC
  namespace giac {
#endif // ndef NO_NAMESPACE_GIAC

    const char invalid_name[]="Invalid name";
    void increment_lexer_line_number_setcol(yyscan_t yyscanner,GIAC_CONTEXT){
      giac_yyset_column(1,yyscanner);
      increment_lexer_line_number(contextptr);
    }
    bool doing_insmod = false;

#ifdef HAVE_LIBPTHREAD
    static pthread_mutex_t * syms_mutex_ptr = 0;
    
    int lock_syms_mutex(){
      if (!syms_mutex_ptr){
	pthread_mutex_t tmp=PTHREAD_MUTEX_INITIALIZER;
	syms_mutex_ptr=new pthread_mutex_t(tmp);
      }
      return pthread_mutex_lock(syms_mutex_ptr);
    }
    
    void unlock_syms_mutex(){
      if (syms_mutex_ptr) 
	pthread_mutex_unlock(syms_mutex_ptr);    
    }

#else
    int lock_syms_mutex(){ return 0; }
    void unlock_syms_mutex(){}
#endif

    sym_string_tab & syms(){
      static sym_string_tab * ans=new sym_string_tab;
      return * ans;
    }

    bool builtin_lexer_functions_sorted = false;

    map_charptr_gen & lexer_functions(){
      static map_charptr_gen * ans=0;
      if (!ans){
	ans = new map_charptr_gen;
	doing_insmod=false;
	builtin_lexer_functions_sorted=false;
      }
      return * ans;
    }


#ifdef STATIC_BUILTIN_LEXER_FUNCTIONS
    // gen alias for static initialization on 32 bits processor
    struct charptr_gen_unary {
      const char * s;
      unsigned char type;  // see dispatch.h
      signed char subtype;
      unsigned short reserved; 
      unsigned long _FUNC_; // unary_function_ptr *
    };

    const charptr_gen_unary builtin_lexer_functions[] ={
#if defined(GIAC_HAS_STO_38) && defined(CAS38_DISABLED)
#include "static_lexer_38.h"
#else
#include "static_lexer.h"
#endif
    };

    const unsigned builtin_lexer_functions_number=sizeof(builtin_lexer_functions)/sizeof(charptr_gen_unary);
    // return true/false to tell if s is recognized. return the appropriate gen if true
    bool CasIsBuildInFunction(char const *s, gen &g){ 
      // binary search in builtin_lexer_functions
      int i=0, j=builtin_lexer_functions_number-1;
      int cmp;
      cmp= strcmp(s,builtin_lexer_functions[i].s);
      if (cmp==0) goto found; if (cmp<0) return false;
      cmp= strcmp(s,builtin_lexer_functions[j].s);
      if (cmp==0) { i=j; goto found; } if (cmp>0) return false;
      while (1){
        if (i+1>=j) return false;
        int mid= (i+j)/2;
        cmp= strcmp(s,builtin_lexer_functions[mid].s);
        if (cmp==0) { i=mid; goto found; } 
        if (cmp>0) i= mid; else j=mid;
      }
    found:
#ifdef NSPIRE
      g= gen(int((*builtin_lexer_functions_())[i]+builtin_lexer_functions[i]._FUNC_));
#else
      g= gen(int(builtin_lexer_functions_[i]+builtin_lexer_functions[i]._FUNC_));
#endif
      g= gen(*g._FUNCptr);
      return true;
    }

#ifdef NSPIRE
    vector<unsigned long> * builtin_lexer_functions_(){
      static vector<unsigned long> * res=0;
      if (res) return res;
      res = new vector<unsigned long>;
      res->reserve(builtin_lexer_functions_number+1);
#include "static_lexer_at.h"
      return res;
    }
#else
    // Array added because GH compiler stores builtin_lexer_functions in RAM
    const unsigned long builtin_lexer_functions_[]={
#if defined(GIAC_HAS_STO_38) && defined(CAS38_DISABLED)
#include "static_lexer_38_.h"
#else
#include "static_lexer_.h"
#endif
    };
#endif

    charptr_gen * builtin_lexer_functions_begin(){
      return (charptr_gen *) builtin_lexer_functions;
    }

    charptr_gen * builtin_lexer_functions_end(){
      return builtin_lexer_functions_begin()+builtin_lexer_functions_number;
    }

#else
    unsigned builtin_lexer_functions_number;
    charptr_gen * builtin_lexer_functions(){
      static charptr_gen * ans=0;
      if (!ans){
	ans = new charptr_gen[1400];
	builtin_lexer_functions_number=0;
      }
      return ans;
    }

    charptr_gen * builtin_lexer_functions_begin(){
      return builtin_lexer_functions();
    }

    charptr_gen * builtin_lexer_functions_end(){
      return builtin_lexer_functions()+builtin_lexer_functions_number;
    }

    const unsigned long * const builtin_lexer_functions_=0;
    
#endif

    std::vector<int> & lexer_localization_vector(){
      static std::vector<int> * ans=new  std::vector<int>;
      return *ans;
    }

#ifdef USTL
    ustl::map<std::string,std::string> & lexer_localization_map(){
      static ustl::map<std::string,std::string> * ans = new ustl::map<std::string,std::string>;
      return * ans;
    }
    ustl::multimap<std::string,giac::localized_string> & back_lexer_localization_map(){
      static ustl::multimap<std::string,giac::localized_string> * ans= new ustl::multimap<std::string,giac::localized_string>;
      return * ans;
    }

    // lexer_localization_vector() is the list of languages currently translated
    // lexer_localization_map translates keywords from the locale to giac 
    // back_lexer_localization_map() lists for a giac keyword the translations

    ustl::map<std::string,std::vector<std::string> > & lexer_translator (){
      static ustl::map<std::string,std::vector<std::string> > * ans = new ustl::map<std::string,std::vector<std::string> >;
      return * ans;
    }
    // lexer_translator will be updated when export/with is called
    // To each string (w/o ::) in a given library, 
    // If it exists, we push_back the full string (with ::)
    // If not we create a vector with the full string
    // If a library is unexported we remove the corresponding entry in the 
    // vector and remove the entry if the vector is empty
    ustl::map<std::string,std::vector<std::string> > & library_functions (){
      static ustl::map<std::string,std::vector<std::string> > * ans=new ustl::map<std::string,std::vector<std::string> >;
      return *ans;
    }

#else
    std::map<std::string,std::string> & lexer_localization_map(){
      static std::map<std::string,std::string> * ans = new std::map<std::string,std::string>;
      return * ans;
    }
    std::multimap<std::string,giac::localized_string> & back_lexer_localization_map(){
      static std::multimap<std::string,giac::localized_string> * ans= new std::multimap<std::string,giac::localized_string>;
      return * ans;
    }
    // lexer_localization_vector() is the list of languages currently translated
    // lexer_localization_map translates keywords from the locale to giac 
    // back_lexer_localization_map() lists for a giac keyword the translations

    std::map<std::string,std::vector<std::string> > & lexer_translator (){
      static std::map<std::string,std::vector<std::string> > * ans = new std::map<std::string,std::vector<std::string> >;
      return * ans;
    }
    // lexer_translator will be updated when export/with is called
    // To each string (w/o ::) in a given library, 
    // If it exists, we push_back the full string (with ::)
    // If not we create a vector with the full string
    // If a library is unexported we remove the corresponding entry in the 
    // vector and remove the entry if the vector is empty
    std::map<std::string,std::vector<std::string> > & library_functions (){
      static std::map<std::string,std::vector<std::string> > * ans=new std::map<std::string,std::vector<std::string> >;
      return *ans;
    }

#endif

    // First string is the library name, second is the vector of function names
    // User defined relations
    vector<user_function> & registered_lexer_functions(){
      static vector<user_function> * ans = 0;
      if (!ans){
	ans = new vector<user_function>;
	// ans->reserve(50);
      }
      return * ans;
    }

    /* integer values */
    struct lexer_tab_int_type {
      const char * keyword;
      unsigned char status;
      int value;
      signed char subtype;
      short int return_value;
    };

    bool tri1(const lexer_tab_int_type & a,const lexer_tab_int_type & b){
      int res= strcmp(a.keyword,b.keyword);
      return res<0;
    }

    bool tri2(const char * a,const char * b){
      return strcmp(a,b)<0;
    }

    const lexer_tab_int_type lexer_tab_int_values []={
#ifdef GIAC_HAS_STO_38
#include "lexer_tab38_int.h"
#else
#include "lexer_tab_int.h"
#endif
    };

    const lexer_tab_int_type * const lexer_tab_int_values_begin = lexer_tab_int_values;
    const unsigned lexer_tab_int_values_n=sizeof(lexer_tab_int_values)/sizeof(lexer_tab_int_type);
    const lexer_tab_int_type * const lexer_tab_int_values_end = lexer_tab_int_values+lexer_tab_int_values_n;
#ifndef NO_NAMESPACE_GIAC
  } // namespace giac
#endif // ndef NO_NAMESPACE_GIAC

/* Abbreviations */
/* If changed, modify isalphan in help.cc FIXME is . allowed inside alphanumeric ? answer NO */




/*
 *  Lexical rules
 */
#line 1653 "input_lexer.cc"

#define INITIAL 0
#define comment 1
#define comment_hash 2
#define str 3
#define backquote 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int giac_yylex_init (yyscan_t* scanner);

int giac_yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int giac_yylex_destroy (yyscan_t yyscanner );

int giac_yyget_debug (yyscan_t yyscanner );

void giac_yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE giac_yyget_extra (yyscan_t yyscanner );

void giac_yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *giac_yyget_in (yyscan_t yyscanner );

void giac_yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *giac_yyget_out (yyscan_t yyscanner );

void giac_yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t giac_yyget_leng (yyscan_t yyscanner );

char *giac_yyget_text (yyscan_t yyscanner );

int giac_yyget_lineno (yyscan_t yyscanner );

void giac_yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * giac_yyget_lval (yyscan_t yyscanner );

void giac_yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int giac_yywrap (yyscan_t yyscanner );
#else
extern int giac_yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int giac_yylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int giac_yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 379 "input_lexer.ll"


#line 1893 "input_lexer.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			giac_yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		giac_yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1225 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1884 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 381 "input_lexer.ll"
/* skip whitespace */
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 382 "input_lexer.ll"
increment_lexer_line_number_setcol(yyscanner,yyextra); //CERR << "Scanning line " << lexer_line_number(yyextra) << endl;
	YY_BREAK
/* Strings */
/* \"[^\"]*\"        yylval = string2gen( giac_yytext); return T_STRING; */
case 3:
YY_RULE_SETUP
#line 385 "input_lexer.ll"
BEGIN(str); comment_s("",yyextra);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 386 "input_lexer.ll"
increment_comment_s('"',yyextra);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 387 "input_lexer.ll"
{  index_status(yyextra)=1; BEGIN(INITIAL); 
                  (*yylval)=string2gen(comment_s(yyextra),false); 
                  return T_STRING; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 390 "input_lexer.ll"
increment_comment_s('\n',yyextra); increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 391 "input_lexer.ll"
{
                   /* octal escape sequence */
                   int result;
                   (void) sscanf( yytext + 1, "%o", &result );
                   increment_comment_s(char(result & 0xff),yyextra);
                   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 397 "input_lexer.ll"
{
                   /* generate error - bad escape sequence; something
                    * like '\48' or '\0777777'
                    */
                   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 402 "input_lexer.ll"
increment_comment_s('\n',yyextra);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 403 "input_lexer.ll"
increment_comment_s('\t',yyextra);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 404 "input_lexer.ll"
increment_comment_s('\r',yyextra);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 405 "input_lexer.ll"
increment_comment_s('\b',yyextra);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 406 "input_lexer.ll"
increment_comment_s('\f',yyextra);
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 407 "input_lexer.ll"
increment_comment_s(yytext[1],yyextra);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 408 "input_lexer.ll"
increment_comment_s(yytext,yyextra);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 409 "input_lexer.ll"
if (rpn_mode(yyextra)){ index_status(yyextra)=0; return T_ACCENTGRAVE; } else { BEGIN(backquote); comment_s("",yyextra); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 410 "input_lexer.ll"
increment_comment_s('\n',yyextra); increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 411 "input_lexer.ll"
increment_comment_s(yytext,yyextra);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 412 "input_lexer.ll"
{  index_status(yyextra)=1; BEGIN(INITIAL); 
  return find_or_make_symbol(comment_s(yyextra),(*yylval),yyscanner,true,yyextra); }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 415 "input_lexer.ll"
index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 416 "input_lexer.ll"
index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);/* (*yylval) = string2gen('"'+string(giac_yytext).substr(2,string(giac_yytext).size()-3)+'"');   return T_COMMENT; */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 417 "input_lexer.ll"
BEGIN(comment); comment_s(yyextra)="";
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 419 "input_lexer.ll"
comment_s(yyextra)+=yytext; /* eat anything that's not a '*' */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 420 "input_lexer.ll"
comment_s(yyextra)+=yytext; /* eat up '*'s not followed by '/'s */
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 421 "input_lexer.ll"
comment_s(yyextra) += '\n'; increment_lexer_line_number_setcol(yyscanner,yyextra); CERR << "(Comment) scanning line " << lexer_line_number(yyextra) << endl;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 422 "input_lexer.ll"
BEGIN(INITIAL); index_status(yyextra)=0; /* (*yylval) = string2gen(comment_s(yyextra),false); return T_COMMENT; */
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 423 "input_lexer.ll"
index_status(yyextra)=0; /* (*yylval) = string2gen('"'+string(yytext).substr(3,string(yytext).size()-6)+'"'); return T_COMMENT; */
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 424 "input_lexer.ll"
index_status(yyextra)=0; /* (*yylval) = string2gen('"'+string(yytext).substr(3,string(yytext).size()-6)+'"'); return T_COMMENT; */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 426 "input_lexer.ll"
if (index_status(yyextra)) return T_INTERROGATION; if (calc_mode(yyextra)==1){ *yylval=undef; return T_SYMBOL;}  return T_HELP;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 427 "input_lexer.ll"
opened_quote(yyextra) |= 2; return T_UNIT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 428 "input_lexer.ll"
if (opened_quote(yyextra) & 1) { opened_quote(yyextra) &= 0x7ffffffe; return T_QUOTE; } if (index_status(yyextra) && !in_rpn(yyextra) && xcas_mode(yyextra)!= 1) return T_PRIME; opened_quote(yyextra) |= 1; return T_QUOTE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 429 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) return TI_SEMI; (*yylval)=0; return T_SEMI;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 430 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) return T_SEMI; return TI_SEMI;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 431 "input_lexer.ll"
if (spread_formula(yyextra)) return T_DEUXPOINTS; if ( xcas_mode(yyextra)==3 ) { index_status(yyextra)=0; return TI_DEUXPOINTS; }  index_status(yyextra)=0; if (xcas_mode(yyextra)>0) { (*yylval)=1; return T_SEMI; } else return T_DEUXPOINTS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 432 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=1; return T_SEMI;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 433 "input_lexer.ll"
index_status(yyextra)=0;return T_DOUBLE_DEUX_POINTS;
	YY_BREAK
/* special values */
case 37:
YY_RULE_SETUP
#line 437 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=theta__IDNT_e; return T_SYMBOL;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 438 "input_lexer.ll"
index_status(yyextra)=1; if (xcas_mode(yyextra) > 0 || !i_sqrt_minus1(yyextra)) { (*yylval)=i__IDNT_e; return T_SYMBOL; } else { (*yylval) = cst_i; return T_LITERAL;};
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 439 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 440 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 441 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
/* \xef\xbd\x89            index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL; */
case 42:
YY_RULE_SETUP
#line 443 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 444 "input_lexer.ll"
index_status(yyextra)=1; if (xcas_mode(yyextra)==0 || xcas_mode(yyextra)==3 || rpn_mode(yyextra)) { return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); } else { (*yylval) = cst_i; return T_LITERAL; };
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 445 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 446 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = symbolic(at_exp,1); return T_LITERAL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 447 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 448 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 449 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 450 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 451 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 452 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_euler_gamma; return T_LITERAL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 453 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 454 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 455 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 456 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 457 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 458 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 459 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = minus_inf; return T_LITERAL;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 460 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = undef; return T_LITERAL;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 461 "input_lexer.ll"
return T_END_INPUT;
	YY_BREAK
/* integer values */
case 61:
YY_RULE_SETUP
#line 464 "input_lexer.ll"
if (xcas_mode(yyextra)==2){ (*yylval) = gen(at_user_operator,6); index_status(yyextra)=0; return T_UNARY_OP; }  index_status(yyextra)=0; (*yylval) = _FUNC; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 465 "input_lexer.ll"
if (xcas_mode(yyextra)==3) { index_status(yyextra)=1; return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); } index_status(yyextra)=0; (*yylval) = _MAPLE_LIST ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_TYPE_ID;
	YY_BREAK
/* vector/polynom/matrice delimiters */
case 63:
YY_RULE_SETUP
#line 469 "input_lexer.ll"
(*yylval) = _SEQ__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 470 "input_lexer.ll"
(*yylval) = _SET__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 471 "input_lexer.ll"
(*yylval) = _INTERVAL__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 472 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 473 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_BEGIN_PAR;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 474 "input_lexer.ll"
(*yylval) = _RPN_FUNC__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 475 "input_lexer.ll"
(*yylval) = _GROUP__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 476 "input_lexer.ll"
(*yylval) = _LINE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 477 "input_lexer.ll"
(*yylval) = _VECTOR__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 478 "input_lexer.ll"
(*yylval) = _MATRIX__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 479 "input_lexer.ll"
(*yylval) = _PNT__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 480 "input_lexer.ll"
(*yylval) = _GGB__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 481 "input_lexer.ll"
(*yylval) = _POINT__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 482 "input_lexer.ll"
(*yylval) = _CURVE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 483 "input_lexer.ll"
(*yylval) = _HALFLINE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 484 "input_lexer.ll"
(*yylval) = _POLY1__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 485 "input_lexer.ll"
(*yylval) = _ASSUME__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 486 "input_lexer.ll"
(*yylval) = _SPREAD__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 487 "input_lexer.ll"
(*yylval) = _FOLDER__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 488 "input_lexer.ll"
(*yylval) = _POLYEDRE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 489 "input_lexer.ll"
(*yylval) = _RGBA__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 490 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 491 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 492 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2);  return T_TEST_EQUAL;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 493 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_strict,2); return T_TEST_EQUAL;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 494 "input_lexer.ll"
index_status(yyextra)=0; return T_VIRGULE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 495 "input_lexer.ll"
index_status(yyextra)=0; return T_VIRGULE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 496 "input_lexer.ll"
index_status(yyextra)=0; *yylval = 0; return T_BEGIN_PAR;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 497 "input_lexer.ll"
index_status(yyextra)=1; return T_END_PAR;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 498 "input_lexer.ll"
if (index_status(yyextra)) { index_status(yyextra)=0; return T_INDEX_BEGIN; } else { (*yylval) = 0; return T_VECT_DISPATCH; } ;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 499 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 500 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _POLY1__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 501 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 502 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _MATRIX__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 503 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 504 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _ASSUME__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 505 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
/* geometric delimiters */
case 100:
YY_RULE_SETUP
#line 507 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _GROUP__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 508 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 509 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LINE__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 510 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 511 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _VECTOR__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 512 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 513 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _CURVE__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 514 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
/* gen delimiters */
case 108:
YY_RULE_SETUP
#line 516 "input_lexer.ll"
index_status(yyextra)=0; if (rpn_mode(yyextra) ||calc_mode(yyextra)==1) { (*yylval)=0; return T_VECT_DISPATCH; } if (xcas_mode(yyextra)==3 || abs_calc_mode(yyextra)==38){ (*yylval) = _LIST__VECT;  return T_VECT_DISPATCH; } if (xcas_mode(yyextra) > 0 ){ (*yylval)=_SET__VECT; return T_VECT_DISPATCH; } else return T_BLOC_BEGIN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 517 "input_lexer.ll"
index_status(yyextra)=1; if (rpn_mode(yyextra) || calc_mode(yyextra)==1) return T_VECT_END; if (xcas_mode(yyextra)==3 || abs_calc_mode(yyextra)==38) return T_VECT_END; if (xcas_mode(yyextra) > 0) return T_VECT_END; else return T_BLOC_END;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 518 "input_lexer.ll"
index_status(yyextra)=0;  (*yylval)=_SET__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 519 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 520 "input_lexer.ll"
index_status(yyextra)=0; return T_ROOTOF_BEGIN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 521 "input_lexer.ll"
index_status(yyextra)=1; return T_ROOTOF_END;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 522 "input_lexer.ll"
index_status(yyextra)=0; return T_SPOLY1_BEGIN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 523 "input_lexer.ll"
index_status(yyextra)=1; return T_SPOLY1_END;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 524 "input_lexer.ll"
index_status(yyextra)=0; ++in_rpn(yyextra); return T_RPN_BEGIN;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 525 "input_lexer.ll"
index_status(yyextra)=0; --in_rpn(yyextra); return T_RPN_END;
	YY_BREAK
/* binary operators */
case 118:
YY_RULE_SETUP
#line 528 "input_lexer.ll"
index_status(yyextra)=0; return T_MAPSTO;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 529 "input_lexer.ll"
(*yylval) = gen(at_couleur,2); index_status(yyextra)=0; return T_INTERVAL;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 530 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_TEST_EQUAL;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 531 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_QUOTED_BINARY;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 532 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_QUOTED_BINARY;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 533 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 534 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 535 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 536 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 537 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 538 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 539 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 540 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 541 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 542 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 543 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 544 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 545 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 546 "input_lexer.ll"
spread_formula(yyextra)=!index_status(yyextra); index_status(yyextra)=0; (*yylval)=gen(at_equal,2); return T_EQUAL;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 547 "input_lexer.ll"
spread_formula(yyextra)=!index_status(yyextra); index_status(yyextra)=0; (*yylval)=gen(at_equal2,2); return T_EQUAL;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 548 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_equal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 549 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); if (xcas_mode(yyextra)>0) return T_DOLLAR_MAPLE; else return T_DOLLAR;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 550 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_DOLLAR_MAPLE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 551 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_QUOTED_BINARY;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 552 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_QUOTED_BINARY;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 553 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_AFFECT;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 554 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_QUOTED_BINARY;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 555 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_QUOTED_BINARY;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 556 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 557 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 558 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 559 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 560 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_array_sto,2); return T_AFFECT;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 561 "input_lexer.ll"
index_status(yyextra)=1; yytext[0]='0'; (*yylval) = symb_double_deux_points(makevecteur(_IDNT_id_at,chartab2gen(yytext,yyextra))); return T_SYMBOL;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 562 "input_lexer.ll"
if (xcas_mode(yyextra)!=3) {index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_COMPOSE; } BEGIN(comment_hash);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 563 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_POW;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 564 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 565 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 566 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_QUOTED_BINARY;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 567 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_QUOTED_BINARY;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 568 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 569 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 570 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 571 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 572 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 573 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_tilocal,2); return T_PIPE;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 574 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 575 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 576 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 577 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 578 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 579 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_AND_OP;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 580 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_QUOTED_BINARY;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 581 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_QUOTED_BINARY;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 582 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_AND_OP;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 583 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_INTERVAL;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 584 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_UNARY_OP;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 585 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_INTERVAL;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 586 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_QUOTED_BINARY;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 587 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_QUOTED_BINARY;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 588 "input_lexer.ll"
if (xcas_mode(yyextra) || index_status(yyextra)) { (*yylval)=gen(at_factorial); return T_FACTORIAL; } else { index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_NOT; }
	YY_BREAK
/* standard functions */
case 179:
YY_RULE_SETUP
#line 591 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=symbolic(at_Ans,0); return T_LITERAL;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 592 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 593 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_FACTORIAL;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 594 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_PLUS;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 595 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_FACTORIAL;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 596 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_PLUS;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 597 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointplus,2); return T_PLUS;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 598 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 599 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sqrt,2); return T_NOT;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 600 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_polar_complex,2); return T_MOD;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 601 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=2; return T_SQ;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 602 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=3; return T_SQ;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 603 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=4; return T_SQ;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 604 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=5; return T_SQ;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 605 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=6; return T_SQ;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 606 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=7; return T_SQ;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 607 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=8; return T_SQ;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 608 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=9; return T_SQ;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 609 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=-1; return T_SQ;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 610 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=-1; return T_SQ;
	YY_BREAK
/* "','"                   index_status(yyextra)=0; (*yylval)=gen(at_makevector,2); return T_QUOTED_BINARY; commented because of f('a','b') */
case 199:
YY_RULE_SETUP
#line 612 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 613 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 614 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return (calc_mode(yyextra)==38)?T_MOINS38:T_MOINS;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 615 "input_lexer.ll"
index_status(yyextra)=0; if (calc_mode(yyextra)==38){ (*yylval)=gen(at_neg,2); return T_NEG38; } else { CERR << 1 << endl; (*yylval)=gen(at_binary_minus,2); return T_MOINS;}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 616 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointminus,2); return T_PLUS;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 617 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 618 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 619 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_FOIS;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 620 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_cross,2); return T_FOIS;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 621 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_multcrement,1); return T_FOIS;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 622 "input_lexer.ll"
index_status(yyextra)=0; if (abs_calc_mode(yyextra)==38){return T_DOUBLE_DEUX_POINTS; } else {(*yylval)=gen(at_prod,2); return T_FOIS;}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 623 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ampersand_times,2); return T_FOIS;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 624 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_quote_pow,2); return T_POW;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 625 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointprod,2); return T_FOIS;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 626 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_QUOTED_BINARY;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 627 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_QUOTED_BINARY;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 628 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_DIV;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 629 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_divcrement,1); return T_DIV;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 630 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointdivision,2); return T_DIV;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 631 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_QUOTED_BINARY;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 632 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_QUOTED_BINARY;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 633 "input_lexer.ll"
index_status(yyextra)=0; if (abs_calc_mode(yyextra)==38){ (*yylval)=gen(at_PERCENT); return T_UNARY_OP_38; } if (xcas_mode(yyextra)==3 || calc_mode(yyextra)==1) { (*yylval)=gen(at_pourcent); return T_FACTORIAL; } if (xcas_mode(yyextra)==1) { (*yylval)=symbolic(at_ans,vecteur(0)); return T_NUMBER; }  if (xcas_mode(yyextra)) (*yylval)=gen(at_irem,2); else (*yylval)=0; return T_MOD;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 634 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==0){ (*yylval)=gen(at_iquorem,2); return T_MOD;} (*yylval)=symbolic(at_ans,-2); return T_NUMBER; 
	YY_BREAK
/* \xe2\x88\xa1             index_status(yyextra)=0; (*yylval)=gen(at_polar_complex,2); return T_MOD; */
case 222:
YY_RULE_SETUP
#line 636 "input_lexer.ll"
if (xcas_mode(yyextra)==0){ (*yylval)=gen(at_quorem,2); return T_MOD;} index_status(yyextra)=0; (*yylval)=symbolic(at_ans,-3); return T_NUMBER; 
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 637 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 638 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) { (*yylval)=gen(at_irem,2); return T_UNARY_OP; } else { if (xcas_mode(yyextra)) (*yylval)=gen(at_irem,2); else (*yylval)=0; return T_MOD; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 639 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 640 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
/* "MOD"                   index_status(yyextra)=0; return T_MOD; */
case 227:
YY_RULE_SETUP
#line 642 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_POW;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 643 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_trn,1); return T_FACTORIAL;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 644 "input_lexer.ll"
(*yylval) = gen(at_pow,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 645 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_POW;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 646 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointpow,2); return T_POW;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 647 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 648 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 649 "input_lexer.ll"
(*yylval) = gen(at_Digits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 650 "input_lexer.ll"
(*yylval) = gen(at_HDigits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 651 "input_lexer.ll"
(*yylval) = gen(at_HAngle,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 652 "input_lexer.ll"
(*yylval) = gen(at_HFormat,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 653 "input_lexer.ll"
(*yylval) = gen(at_HComplex,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 654 "input_lexer.ll"
(*yylval) = gen(at_HLanguage,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 655 "input_lexer.ll"
(*yylval) = gen(at_Digits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 656 "input_lexer.ll"
(*yylval) = gen(at_threads,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 657 "input_lexer.ll"
(*yylval) = gen(at_scientific_format,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 658 "input_lexer.ll"
(*yylval) = gen(at_angle_radian,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 659 "input_lexer.ll"
(*yylval) = gen(at_approx_mode,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 660 "input_lexer.ll"
(*yylval) = gen(at_all_trig_solutions,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 661 "input_lexer.ll"
(*yylval) = gen(at_ntl_on,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 662 "input_lexer.ll"
(*yylval) = gen(at_complex_mode,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 663 "input_lexer.ll"
(*yylval) = gen(at_complex_variables,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 664 "input_lexer.ll"
(*yylval) = gen(at_epsilon,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 665 "input_lexer.ll"
(*yylval) = gen(at_proba_epsilon,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 667 "input_lexer.ll"
(*yylval) = gen(at_acos,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 668 "input_lexer.ll"
(*yylval) = gen(at_randNorm,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 669 "input_lexer.ll"
(*yylval) = gen(at_acosh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 670 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_args,0); return T_QUOTED_BINARY;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 671 "input_lexer.ll"
(*yylval) = gen(at_asin,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 672 "input_lexer.ll"
(*yylval) = gen(at_asinh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 673 "input_lexer.ll"
(*yylval) = gen(at_at,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 674 "input_lexer.ll"
(*yylval) = gen(at_atan,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 675 "input_lexer.ll"
(*yylval) = gen(at_atanh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 676 "input_lexer.ll"
(*yylval) = gen(at_backquote,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 677 "input_lexer.ll"
(*yylval) = gen(at_bloc,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 678 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_break,0); return T_BREAK;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 679 "input_lexer.ll"
index_status(yyextra)=0; if (abs_calc_mode(yyextra)==38) return T_CASE38; else return T_CASE;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 680 "input_lexer.ll"
(*yylval) = gen(at_cont,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 681 "input_lexer.ll"
(*yylval) = gen(at_debug,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 682 "input_lexer.ll"
(*yylval) = gen(at_derive,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 683 "input_lexer.ll"
if (xcas_mode(yyextra)==1 || xcas_mode(yyextra)==2) { (*yylval) = gen(at_function_diff,1); index_status(yyextra)=1; return T_UNARY_OP;} else { index_status(yyextra)=1; return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 684 "input_lexer.ll"
if (xcas_mode(yyextra)==1 || xcas_mode(yyextra)==2) { (*yylval)=e__IDNT_e; }else (*yylval)=symbolic(at_exp,1); index_status(yyextra)=1; return T_NUMBER;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 685 "input_lexer.ll"
(*yylval)=symbolic(at_exp,1); index_status(yyextra)=1; return T_NUMBER;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 686 "input_lexer.ll"
(*yylval)=symbolic(at_exp,1); index_status(yyextra)=1; return T_NUMBER;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 687 "input_lexer.ll"
(*yylval) = gen(at_equal,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 688 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_throw,1); return T_RETURN;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 689 "input_lexer.ll"
(*yylval) = gen(at_erase,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 690 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_throw,1); return T_RETURN;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 691 "input_lexer.ll"
if (xcas_mode(yyextra)==3) (*yylval)=gen(at_partfrac); else (*yylval) = gen(at_expand,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 692 "input_lexer.ll"
(*yylval) = gen(at_insmod,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 693 "input_lexer.ll"
(*yylval) = gen(at_expand,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 694 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_FOR;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 695 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_FOR;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 696 "input_lexer.ll"
(*yylval) = gen(at_halt,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 697 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=4; return T_BLOC_END;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 698 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=9; return T_BLOC_END;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 699 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=3; return T_BLOC_END;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 700 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IF;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 701 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); if (rpn_mode(yyextra)) return T_RPN_IF; return T_IF; 
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 702 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IFTE;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 703 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_when,3); return T_IFTE;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 704 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 705 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 706 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 707 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_ifactors); else (*yylval) = gen(at_ifactors,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 708 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_intersect,2); return T_QUOTED_BINARY;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 709 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_intersect,2); return T_QUOTED_BINARY;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 710 "input_lexer.ll"
(*yylval) = gen(at_kill,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 711 "input_lexer.ll"
(*yylval) = gen(at_ln,1); index_status(yyextra)=1; return T_UNARY_OP; /* index_status(yyextra)=1 to accept log[] for a basis log */
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 712 "input_lexer.ll"
(*yylval) = gen(at_asin,1); index_status(yyextra)=1; return T_UNARY_OP;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 713 "input_lexer.ll"
(*yylval) = gen(at_acos,1); index_status(yyextra)=1; return T_UNARY_OP;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 714 "input_lexer.ll"
(*yylval) = gen(at_atan,1); index_status(yyextra)=1; return T_UNARY_OP;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 715 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 716 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 717 "input_lexer.ll"
(*yylval) = gen(at_not,1); if (xcas_mode(yyextra)) return T_NOT;  index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 718 "input_lexer.ll"
(*yylval) = gen(at_not,1); return T_NOT;  
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 719 "input_lexer.ll"
(*yylval) = gen(at_neg,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 720 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_QUOTED_BINARY;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 721 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_QUOTED_BINARY;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 722 "input_lexer.ll"
(*yylval) = gen(at_greduce,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 723 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_of,2); return T_QUOTED_BINARY;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 724 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_op,1); else (*yylval) = gen(at_feuille,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 725 "input_lexer.ll"
(*yylval) = gen(at_feuille,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 726 "input_lexer.ll"
(*yylval)=2; index_status(yyextra)=0; return T_LOCAL;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 727 "input_lexer.ll"
(*yylval) = gen(at_pcoeff,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 728 "input_lexer.ll"
(*yylval) = gen(at_funcplot,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 729 "input_lexer.ll"
(*yylval) = gen(at_user_operator,6); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 730 "input_lexer.ll"
if (rpn_mode(yyextra)) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 731 "input_lexer.ll"
if (rpn_mode(yyextra)) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 732 "input_lexer.ll"
if (rpn_mode(yyextra)) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 733 "input_lexer.ll"
(*yylval) = gen(at_srand,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 734 "input_lexer.ll"
(*yylval) = gen(at_for,1) ; index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 735 "input_lexer.ll"
(*yylval) = gen(at_for,1) ; index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 736 "input_lexer.ll"
(*yylval) = gen(at_for,1) ;index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 737 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 738 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 739 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 740 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_QUOTED_BINARY;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 741 "input_lexer.ll"
(*yylval) = gen(at_maple_root,1); index_status(yyextra)=1; return T_UNARY_OP;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 742 "input_lexer.ll"
(*yylval) = gen(at_same,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 743 "input_lexer.ll"
(*yylval) = gen(at_sst,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 744 "input_lexer.ll"
(*yylval) = gen(at_sst_in,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 745 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_subs,2); else (*yylval) = gen(at_subs,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 746 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_subsop,2); else (*yylval) = gen(at_subsop,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 747 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_union,2); return T_QUOTED_BINARY;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 748 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_union,2); return T_QUOTED_BINARY;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 749 "input_lexer.ll"
(*yylval) = gen(at_virgule,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 750 "input_lexer.ll"
(*yylval) = gen(at_VARS,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 751 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); if (xcas_mode(yyextra)==3) return TI_WHILE; if (xcas_mode(yyextra)!=0) return T_MUPMAP_WHILE; return T_WHILE;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 752 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_MUPMAP_WHILE; /* return T_RPN_WHILE; */
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 753 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_DO; /* must be here for DO ... END loop */
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 754 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_DO; /* must be here for DO ... END loop */
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 755 "input_lexer.ll"
(*yylval) = gen(at_Text,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 756 "input_lexer.ll"
(*yylval) = gen(at_DropDown,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 757 "input_lexer.ll"
(*yylval) = gen(at_Popup,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 758 "input_lexer.ll"
(*yylval) = gen(at_Request,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 759 "input_lexer.ll"
(*yylval) = gen(at_Title,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 760 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 761 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 762 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 763 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IF;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 764 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 765 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_breakpoint,0); return T_BREAK;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 766 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_LOOP;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 767 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_FOR;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 768 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_WHILE;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 769 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_CONTINUE;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 770 "input_lexer.ll"
(*yylval) = gen(at_print,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 771 "input_lexer.ll"
(*yylval) = gen(at_Pause,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 772 "input_lexer.ll"
(*yylval) = gen(at_label,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 773 "input_lexer.ll"
(*yylval) = gen(at_goto,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 774 "input_lexer.ll"
(*yylval) = gen(at_Dialog,1) ; index_status(yyextra)=0; return TI_DIALOG; 
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 775 "input_lexer.ll"
(*yylval) = gen(at_Row,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 776 "input_lexer.ll"
(*yylval) = gen(at_Col,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 778 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_DELTALIST); return T_UNARY_OP_38; 
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 779 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_PILIST); return T_UNARY_OP_38; 
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 780 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_HPSUM); return T_UNARY_OP_38; 
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 781 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_SIGMALIST); return T_UNARY_OP_38;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 782 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_HPDIFF); return T_UNARY_OP_38; 
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 783 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_HPINT); return T_UNARY_OP_38; 
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 784 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 785 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 786 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 787 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_product); return T_UNARY_OP; 
	YY_BREAK
/* old format for physical constants
"_hbar_"        (*yylval) = symbolic(at_unit,makevecteur(1.05457266e-34,_J_unit*_s_unit)); index_status(yyextra)=0; return T_SYMBOL;
"_c_"        (*yylval) = symbolic(at_unit,makevecteur(299792458,_m_unit/_s_unit)); index_status(yyextra)=0; return T_SYMBOL;
"_g_"        (*yylval) = symbolic(at_unit,makevecteur(9.80665,_m_unit*unitpow(_s_unit,-2))); index_status(yyextra)=0; return T_SYMBOL;
"_IO_" (*yylval) = symbolic(at_unit,makevecteur(1e-12,_W_unit*unitpow(_m_unit,-2))); index_status(yyextra)=0; return T_SYMBOL; 
"_epsilonox_" (*yylval) = 3.9; index_status(yyextra)=0; return T_SYMBOL; 
"_epsilonsi_" (*yylval) = 11.9; index_status(yyextra)=0; return T_SYMBOL; 
"_qepsilon0_" (*yylval) = symbolic(at_unit,makevecteur(1.4185979e-30,_F_unit*_C_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_epsilon0q_" (*yylval) = symbolic(at_unit,makevecteur(55263469.6,_F_unit/(_m_unit*_C_unit))); index_status(yyextra)=0; return T_SYMBOL; 
"_kq_" (*yylval) = symbolic(at_unit,makevecteur(8.617386e-5,_J_unit/(_K_unit*_C_unit))); index_status(yyextra)=0; return T_SYMBOL; 
"_c3_" (*yylval) = symbolic(at_unit,makevecteur(.002897756,_m_unit*_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_lambdac_" (*yylval) = symbolic(at_unit,makevecteur( 0.00242631058e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_f0_" (*yylval) = symbolic(at_unit,makevecteur(2.4179883e14,_Hz_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_lambda0_" (*yylval) = symbolic(at_unit,makevecteur(1239.8425e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_muN_" (*yylval) = symbolic(at_unit,makevecteur(5.0507866e-27,_J_unit/_T_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_muB_" (*yylval) = symbolic(at_unit,makevecteur( 9.2740154e-24,_J_unit/_T_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_a0_" (*yylval) = symbolic(at_unit,makevecteur(.0529177249e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_Rinfinity_" (*yylval) = symbolic(at_unit,makevecteur(10973731.534,unitpow(_m_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
"_Faraday_" (*yylval) = symbolic(at_unit,makevecteur(96485.309,_C_unit/_mol_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_phi_" (*yylval) = symbolic(at_unit,makevecteur(2.06783461e-15,_Wb_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_alpha_" (*yylval) = 7.29735308e-3; index_status(yyextra)=0; return T_SYMBOL; 
"_mpme_" (*yylval) = 1836.152701; index_status(yyextra)=0; return T_SYMBOL; 
"_mp_" (*yylval) = symbolic(at_unit,makevecteur(1.6726231e-27,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_qme_" (*yylval) = symbolic(at_unit,makevecteur(1.75881962e11,_C_unit/_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_me_" (*yylval) = symbolic(at_unit,makevecteur(9.1093897e-31,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_qe_" (*yylval) = symbolic(at_unit,makevecteur(1.60217733e-19,_C_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_h_" (*yylval) = symbolic(at_unit,makevecteur(6.6260755e-34,_J_unit*_s_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_G_" (*yylval) = symbolic(at_unit,makevecteur(6.67259e-11,unitpow(_m_unit,3)*unitpow(_s_unit,-2)*unitpow(_kg_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
"_mu0_" (*yylval) = symbolic(at_unit,makevecteur(1.25663706144e-6,_H_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_epsilon0_" (*yylval) = symbolic(at_unit,makevecteur(8.85418781761e-12,_F_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_sigma_" (*yylval) = symbolic(at_unit,makevecteur( 5.67051e-8,_W_unit*unitpow(_m_unit,-2)*unitpow(_K_unit,-4))); index_status(yyextra)=0; return T_SYMBOL; 
"_StdP_" (*yylval) = symbolic(at_unit,makevecteur(101325.0,_Pa_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_StdT_" (*yylval) = symbolic(at_unit,makevecteur(273.15,_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_R_" (*yylval) = symbolic(at_unit,makevecteur(8.31451,_J_unit/_molK_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_Vm_" (*yylval) = symbolic(at_unit,makevecteur(22.4141,_l_unit/_mol_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_k_" (*yylval) = symbolic(at_unit,makevecteur(1.380658e-23,_J_unit/_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_NA_" (*yylval) = symbolic(at_unit,makevecteur(6.0221367e23,unitpow(_mol_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
"_mSun_" (*yylval) = symbolic(at_unit,makevecteur(1.989e30,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_RSun_" (*yylval) = symbolic(at_unit,makevecteur(6.955e8,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_PSun_" (*yylval) = symbolic(at_unit,makevecteur(3.846e26,_W_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_mEarth_" (*yylval) = symbolic(at_unit,makevecteur(5.9736e24,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_REarth_" (*yylval) = symbolic(at_unit,makevecteur(6.371e6,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_sd_" (*yylval) = symbolic(at_unit,makevecteur(8.61640905e4,_s_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_syr_" (*yylval) = symbolic(at_unit,makevecteur(3.15581498e7,_s_unit)); index_status(yyextra)=0; return T_SYMBOL; 
                        */
/* numbers, also accept DMS e.g 1°15′27″13 */
case 371:
#line 835 "input_lexer.ll"
case 372:
#line 836 "input_lexer.ll"
case 373:
#line 837 "input_lexer.ll"
case 374:
#line 838 "input_lexer.ll"
case 375:
#line 839 "input_lexer.ll"
case 376:
#line 840 "input_lexer.ll"
case 377:
#line 841 "input_lexer.ll"
case 378:
#line 842 "input_lexer.ll"
case 379:
#line 843 "input_lexer.ll"
case 380:
#line 844 "input_lexer.ll"
case 381:
#line 845 "input_lexer.ll"
case 382:
#line 846 "input_lexer.ll"
case 383:
#line 847 "input_lexer.ll"
case 384:
#line 848 "input_lexer.ll"
case 385:
#line 849 "input_lexer.ll"
case 386:
#line 850 "input_lexer.ll"
case 387:
#line 851 "input_lexer.ll"
case 388:
#line 852 "input_lexer.ll"
case 389:
#line 853 "input_lexer.ll"
case 390:
#line 854 "input_lexer.ll"
case 391:
#line 855 "input_lexer.ll"
case 392:
#line 856 "input_lexer.ll"
case 393:
#line 857 "input_lexer.ll"
case 394:
#line 858 "input_lexer.ll"
case 395:
YY_RULE_SETUP
#line 858 "input_lexer.ll"
{ 
  index_status(yyextra)=1;
  int l=strlen(yytext);
  int interv=0; // set to non-zero if ? in the number
  int dot=-1;
  for (int i=0;i<l;++i){
    if (yytext[i]=='?'){
      interv=i; // mark ? position and remove it from the string
      for (;i<l;++i){
	yytext[i]=yytext[i+1];
      }
      --l;
      break;
    }
    if (yytext[i]=='.')
      dot=i;
  }
  // CERR << yytext << " " << interv << endl;
  if (dot>=0 && interv>1){
    --interv; // interv is the relative precision of the interval
    if (interv && dot>=1 && yytext[dot-1]=='0')
      --interv;
    ++dot;
    while (interv && dot<l && yytext[dot]=='0'){
      --interv; ++dot;
    }
  }
  char ch,ch2;
  if (l>2 && yytext[1]!='x' && (yytext[l-1]=='o' || yytext[l-1]=='b' || yytext[l-1]=='h') ){
    char base=yytext[l-1];
    for (int i=l-1;i>1;--i){
      yytext[i]=yytext[i-1];
    }
    if (base=='h')
      base='x';
    yytext[1]=base;
  }
  else {
    for (l=0;(ch=*(yytext+l));++l){
      if (ch=='x')
	break;
      if (ch=='e' || ch=='E'){
	if ( (ch2=*(yytext+l+1)) && (ch2=='e' || ch2=='E')){
	  ++l;
	  for (;(ch=*(yytext+l));++l)
	    *(yytext+l-1)=ch;
	  *(yytext+l-1)=0;
	  --l;
	}
      }
#ifndef BCD
      if ( (ch==-30 && *(yytext+l+1)==-128) || (ch==-62 && *(yytext+l+1)==-80) ){
	*yylval=0; return T_NUMBER;
      }
#endif
      if (ch==-30 && *(yytext+l+1)==-120 &&  *(yytext+l+2)==-110){
	l += 3;
	for (;(ch=*(yytext+l));++l)
	  *(yytext+l-2)=ch;
	*(yytext+l-2)=0;
	l -= 3;
	*(yytext+l)='-';
      }
    }
  }
  (*yylval) = chartab2gen(yytext,yyextra); 
  if (interv){
    double d=evalf_double(*yylval,1,context0)._DOUBLE_val;
    if (d<0 && interv>1)
      --interv;
    double tmp=std::floor(std::log(std::abs(d))/std::log(10));
    tmp=(std::pow(10.,1+tmp-interv));
    *yylval=eval(gen(makevecteur(d-tmp,d+tmp),_INTERVAL__VECT),1,context0);
  }
  return T_NUMBER; 
}
	YY_BREAK
/* UNITS 
"_"{A}{AN}* {
  std::pair<const char * const * const,const char * const * const> pp=equal_range(unitname_tab,unitname_tab_end,yytext,tri2);
  if (pp.first!=pp.second && pp.second!=unitname_tab_end){
    gen tmp=mksa_register_unit(*pp.first,unitptr_tab[pp.first-unitname_tab]);
    (*yylval)=tmp;
    index_status(yyextra)=0;
    return T_SYMBOL;
  }
  int res=find_or_make_symbol(yytext+1,(*yylval),yyscanner,false,yyextra);
 (*yylval)=symb_unit(1,(*yylval),yyextra);
 return res;
}
			*/
/* symbols */
case 396:
#line 951 "input_lexer.ll"
case 397:
YY_RULE_SETUP
#line 951 "input_lexer.ll"
{
 index_status(yyextra)=1;
 int res=find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra);
 if (res==T_NUMBER)
   *yylval=(*yylval)(string2gen(unlocalize(yytext),false),yyextra);
 return res;
} 
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 958 "input_lexer.ll"
if (!xcas_mode(yyextra) || xcas_mode(yyextra)==3) { 
  // CERR << "hash" << endl;
  (*yylval)=gen(at_hash,1); return TI_HASH; 
} else BEGIN(comment_hash);
	YY_BREAK
case 399:
/* rule 399 can match eol */
YY_RULE_SETUP
#line 962 "input_lexer.ll"
BEGIN(INITIAL); index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);  /* comment_s(yyextra)=string(yytext); (*yylval)=string2gen(comment_s(yyextra).substr(0,comment_s(yyextra).size()-1),false); return T_COMMENT; */
	YY_BREAK
/* everything else */
case 400:
YY_RULE_SETUP
#line 964 "input_lexer.ll"
(*yylval)=string2gen(string(yytext),false); return T_STRING;
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 966 "input_lexer.ll"
ECHO;
	YY_BREAK
#line 4089 "input_lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(comment_hash):
case YY_STATE_EOF(str):
case YY_STATE_EOF(backquote):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * giac_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( giac_yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of giac_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					giac_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			giac_yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) giac_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1225 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1225 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1224);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					giac_yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( giac_yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void giac_yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        giac_yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	giac_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	giac_yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void giac_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		giac_yypop_buffer_state();
	 *		giac_yypush_buffer_state(new_buffer);
     */
	giac_yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	giac_yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (giac_yywrap()) processing, but the only time this flag
	 * is looked at is after giac_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void giac_yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE giac_yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) giac_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) giac_yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	giac_yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with giac_yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void giac_yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		giac_yyfree((void *) b->yy_ch_buf ,yyscanner );

	giac_yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a giac_yyrestart() or at EOF.
 */
    static void giac_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	giac_yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then giac_yy_init_buffer was _probably_
     * called from giac_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void giac_yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		giac_yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void giac_yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	giac_yyensure_buffer_stack(yyscanner);

	/* This block is copied from giac_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from giac_yy_switch_to_buffer. */
	giac_yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void giac_yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	giac_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		giac_yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void giac_yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)giac_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in giac_yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)giac_yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in giac_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE giac_yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) giac_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	giac_yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to giac_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       giac_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE giac_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return giac_yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to giac_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE giac_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) giac_yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = giac_yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in giac_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE giac_yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int giac_yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int giac_yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *giac_yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *giac_yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t giac_yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *giac_yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void giac_yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void giac_yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "giac_yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void giac_yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "giac_yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see giac_yy_switch_to_buffer
 */
void giac_yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void giac_yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int giac_yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void giac_yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * giac_yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void giac_yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* giac_yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int giac_yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) giac_yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* giac_yylex_init_extra has the same functionality as giac_yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to giac_yyalloc in
 * the yyextra field.
 */

int giac_yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    giac_yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) giac_yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    giac_yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from giac_yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * giac_yylex_init()
     */
    return 0;
}

/* giac_yylex_destroy is for both reentrant and non-reentrant scanners. */
int giac_yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		giac_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		giac_yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	giac_yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        giac_yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * giac_yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    giac_yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *giac_yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *giac_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void giac_yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see giac_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 966 "input_lexer.ll"



/*
 *  Routines
 */
#ifndef NO_NAMESPACE_GIAC
  namespace giac {
#endif // ndef NO_NAMESPACE_GIAC

#ifdef USTL    
    void update_lexer_localization(const std::vector<int> & v,ustl::map<std::string,std::string> &lexer_map,ustl::multimap<std::string,giac::localized_string> &back_lexer_map){
    }
#else
    void update_lexer_localization(const std::vector<int> & v,std::map<std::string,std::string> &lexer_map,std::multimap<std::string,giac::localized_string> &back_lexer_map){
      lexer_map.clear();
      back_lexer_map.clear();
      int s=v.size();
      for (int i=0;i<s;++i){
	int lang=v[i];
	if (lang>=1 && lang<=4){
	  std::string doc=find_doc_prefix(lang);
	  std::string file=giac::giac_aide_dir()+doc+"keywords";
	  std::string giac_kw,local_kw;
	  size_t l;
	  char * line = (char *)malloc(1024);
	  ifstream f(file.c_str());
	  if (f.good()){
	    CERR << "// Using keyword file " << file << endl;
	    for (;;){
	      f.getline(line,1023,'\n');
	      l=strlen(line);
	      if (f.eof()){
		f.close();
		break;
	      }
	      if (l>3 && line[0]!='#'){
		if (line[l-1]=='\n')
		  --l;
		// read giac keyword
		size_t j;
		giac_kw="";
		for (j=0;j<l;++j){
		  if (line[j]==' ')
		    break;
		  giac_kw += line[j];
		}
		// read corresponding local keywords
		local_kw="";
		for (++j;j<l;++j){
		  if (line[j]==' '){
		    if (!local_kw.empty()){
		      lexer_map[local_kw]=giac_kw;
		      back_lexer_map.insert(pair<string,localized_string>(giac_kw,localized_string(lang,local_kw)));
		    }
		    local_kw="";
		  }
		  else
		    local_kw += line[j];
		}
		if (!local_kw.empty()){
		  lexer_map[local_kw]=giac_kw;
		  back_lexer_map.insert(pair<string,localized_string>(giac_kw,localized_string(lang,local_kw)));
		}
	      }
	    }
	    free(line);
	  } // if (f)
	  else
	    CERR << "// Unable to find keyword file " << file << endl;
	}
      }
    }
#endif

    bool has_special_syntax(const char * s){
#ifdef USTL
      ustl::pair<charptr_gen *,charptr_gen *> p=
	ustl::equal_range(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),
		    std::pair<const char *,gen>(s,0),
		    tri);
#else
      std::pair<charptr_gen *,charptr_gen *> p=
	equal_range(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),
		    std::pair<const char *,gen>(s,0),
		    tri);
#endif
      if (p.first!=p.second && p.first!=builtin_lexer_functions_end())
	return (p.first->second.subtype!=T_UNARY_OP-256);
      map_charptr_gen::const_iterator i = lexer_functions().find(s);
      if (i==lexer_functions().end())
	return false;
      return (i->second.subtype!=T_UNARY_OP-256);
    }
    
    bool lexer_functions_register(const unary_function_ptr & u,const char * s,int parser_token){
      map_charptr_gen::const_iterator i = lexer_functions().find(s);
      if (i!=lexer_functions().end())
	return false;
      if (doing_insmod)
	registered_lexer_functions().push_back(user_function(s,parser_token));
      if (!builtin_lexer_functions_sorted){
#ifndef STATIC_BUILTIN_LEXER_FUNCTIONS
	builtin_lexer_functions_begin()[builtin_lexer_functions_number]=std::pair<const char *,gen>(s,gen(u));
	if (parser_token==1)
	  builtin_lexer_functions_begin()[builtin_lexer_functions_number].second.subtype=T_UNARY_OP-256;
	else
	  builtin_lexer_functions_begin()[builtin_lexer_functions_number].second.subtype=parser_token-256;
	builtin_lexer_functions_number++;
#endif
      }
      else {
	lexer_functions()[s] = gen(u);
	if (parser_token==1)
	  lexer_functions()[s].subtype=T_UNARY_OP-256;
	else
	  lexer_functions()[s].subtype=parser_token-256;
      }
      // If s is a library function name (with ::), update the library
      int ss=strlen(s),j=0;
      for (;j<ss-1;++j){
	if (s[j]==':' && s[j+1]==':')
	  break;
      }
      if (j<ss-1){
	string S(s);
	string libname=S.substr(0,j);
	string funcname=S.substr(j+2,ss-j-2);
#ifdef USTL
	ustl::map<std::string,std::vector<string> >::iterator it=library_functions().find(libname);
#else
	std::map<std::string,std::vector<string> >::iterator it=library_functions().find(libname);
#endif
	if (it!=library_functions().end())
	  it->second.push_back(funcname);
	else
	  library_functions()[libname]=vector<string>(1,funcname);
      }
      return true;
    }

    bool lexer_function_remove(const vector<user_function> & v){
      vector<user_function>::const_iterator it=v.begin(),itend=v.end();
      map_charptr_gen::const_iterator i,iend;
      bool ok=true;
      for (;it!=itend;++it){
	i = lexer_functions().find(it->s.c_str());
	iend=lexer_functions().end();
	if (i==iend)
	  ok=false;
	else
	  lexer_functions().erase(it->s.c_str());
      }
      return ok;
    }

    int find_or_make_symbol(const string & s,gen & res,void * scanner,bool check38,GIAC_CONTEXT){
      int tmpo=opened_quote(contextptr);
      if (tmpo & 2)
	check38=false;
      if (s.size()==1){
#ifdef GIAC_HAS_STO_38
	if (s[0]>='A' && s[0]<='Z'){
	  index_status(contextptr)=1; 
	  res=*tab_one_letter_idnt[s[0]-'A'];
	  return T_SYMBOL;
	}
	if (check38 && s[0]>='a' && s[0]<='z' && calc_mode(contextptr)==38)
	  giac_yyerror(scanner,invalid_name);
#else
	if (s[0]>='a' && s[0]<='z'){
	  if (check38 && calc_mode(contextptr)==38)
	    giac_yyerror(scanner,invalid_name);
	  index_status(contextptr)=1; 
	  res=*tab_one_letter_idnt[s[0]-'a'];
	  return T_SYMBOL;
	}
#endif
	switch (s[0]){
	case '+':
	  res=at_plus;
	  return T_UNARY_OP;
	case '-':
	  res=at_neg;
	  return T_UNARY_OP;
	case '*':
	  res=at_prod;
	  return T_UNARY_OP;
	case '/':
	  res=at_division;
	  return T_UNARY_OP;
	case '^':
	  res=at_pow;
	  return T_UNARY_OP;
	}
      }
      string ts(s);
#ifdef USTL
      ustl::map<std::string,std::string>::const_iterator trans=lexer_localization_map().find(ts);
      if (trans!=lexer_localization_map().end())
	ts=trans->second;
      ustl::map<std::string,std::vector<string> >::const_iterator j=lexer_translator().find(ts);
      if (j!=lexer_translator().end() && !j->second.empty())
	ts=j->second.back();
      ustl::pair<charptr_gen *,charptr_gen *> p=ustl::equal_range(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),std::pair<const char *,gen>(ts.c_str(),0),tri);
#else
      std::map<std::string,std::string>::const_iterator trans=lexer_localization_map().find(ts);
      if (trans!=lexer_localization_map().end())
	ts=trans->second;
      std::map<std::string,std::vector<string> >::const_iterator j=lexer_translator().find(ts);
      if (j!=lexer_translator().end() && !j->second.empty())
	ts=j->second.back();
      std::pair<charptr_gen *,charptr_gen *> p=equal_range(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),std::pair<const char *,gen>(ts.c_str(),0),tri);
#endif
      if (p.first!=p.second && p.first!=builtin_lexer_functions_end()){
	if (p.first->second.subtype==T_TO-256)
	  res=plus_one;
	else
	  res = p.first->second;
	res.subtype=1;
	if (builtin_lexer_functions_){
#ifdef NSPIRE
	  res=gen(int((*builtin_lexer_functions_())[p.first-builtin_lexer_functions_begin()]+p.first->second.val));
	  res=gen(*res._FUNCptr);	  
#else
	  res=gen(int(builtin_lexer_functions_[p.first-builtin_lexer_functions_begin()]+p.first->second.val));
	  res=gen(*res._FUNCptr);
#endif
	}
	index_status(contextptr)=(p.first->second.subtype==T_UNARY_OP-256);
	int token=p.first->second.subtype;
	token += (token<0)?512:256 ;	
	return token;
      }
      lexer_tab_int_type tst={ts.c_str(),0,0,0,0};
#ifdef USTL
      ustl::pair<const lexer_tab_int_type *,const lexer_tab_int_type *> pp = ustl::equal_range(lexer_tab_int_values,lexer_tab_int_values_end,tst,tri1);
#else
      std::pair<const lexer_tab_int_type *,const lexer_tab_int_type *> pp = equal_range(lexer_tab_int_values,lexer_tab_int_values_end,tst,tri1);
#endif
      if (pp.first!=pp.second && pp.first!=lexer_tab_int_values_end){
	index_status(contextptr)=pp.first->status;
	res=int(pp.first->value);
	res.subtype=pp.first->subtype;
	return pp.first->return_value;
      }
      map_charptr_gen::const_iterator i = lexer_functions().find(ts.c_str());
      if (i!=lexer_functions().end()){
	if (i->second.subtype==T_TO-256)
	  res=plus_one;
	else
	  res = i->second;
	res.subtype=1;
	index_status(contextptr)=(i->second.subtype==T_UNARY_OP-256);
	return i->second.subtype+256 ;
      }
      lock_syms_mutex();
      sym_string_tab::const_iterator i2 = syms().find(s),i2end=syms().end();
      if (i2 == i2end) {
	unlock_syms_mutex();  
	const char * S = s.c_str();
	// std::CERR << "lexer new" << s << endl;
	if (check38 && calc_mode(contextptr)==38 && strcmp(S,string_pi) && strcmp(S,string_euler_gamma) && strcmp(S,string_infinity) && strcmp(S,string_undef) && S[0]!='G'&& (!is_known_name_38 || !is_known_name_38(0,S))){
	  // detect invalid names and implicit multiplication 
	  size_t ss=strlen(S);
	  vecteur args;
	  for (size_t i=0;i<ss;++i){
	    char ch=S[i];
	    if (ch=='C' || (ch>='E' && ch<='H') || ch=='L' || ch=='M' || ch=='R'
		/* || ch=='S' */
		|| ch=='U' || ch=='V' || (ch>='X' && ch<='Z') ){
	      string name;
	      name += ch;
	      char c=0;
	      if (i<ss-1)
		c=s[i+1];
	      if (c>='0' && c<='9'){
		name += c;
		++i;
	      }
	      res = identificateur(name);
	      lock_syms_mutex();
	      syms()[name] = res;
	      unlock_syms_mutex();
	      args.push_back(res);
	    }
	    else {
	      string coeff;
	      for (++i;i<ss;++i){
		// up to next alphabetic char
		if (s[i]>32 && isalpha(s[i])){
		  --i;
		  break;
		}
		if (scanner && (s[i]<0 || s[i]>'z')){
		  giac_yyerror(scanner,invalid_name);
		  res=undef;
		  return T_SYMBOL;
		}
		coeff += s[i];
	      }
	      if (coeff.empty())
		res=1;
	      else
		res=atof(coeff.c_str());
	      if (ch=='i')
		res=res*cst_i;
	      else {
		if (ch=='e')
		  res=std::exp(1.0)*res;
		else {
		  // Invalid ident name, report error
		  if ( (ch>'Z' || ch<0) && scanner){
		    giac_yyerror(scanner,invalid_name);
		    res=undef;
		    return T_SYMBOL;
		  }
		  coeff=string(1,ch);
		  gen tmp = identificateur(coeff);
		  // syms()[coeff.c_str()]=tmp;
		  res=res*tmp;
		}
	      }
	      args.push_back(res);
	    }
	  }
	  if (args.size()==1)
	    res=args.front();
	  else 
	    res=_prod(args,contextptr);
	  lock_syms_mutex();
	  syms()[s]=res;
	  unlock_syms_mutex();
	  return T_SYMBOL;
	} // end 38 compatibility mode
	res = identificateur(s);
	lock_syms_mutex();
	syms()[s] = res;
	unlock_syms_mutex();
	return T_SYMBOL;
      } // end if ==syms.end()
      res = i2->second;
      unlock_syms_mutex();  
      return T_SYMBOL;
    }

  // Add to the list of predefined symbols
  void set_lexer_symbols(const vecteur & l,GIAC_CONTEXT){
    if (initialisation_done(contextptr))
      return;
    initialisation_done(contextptr)=true;
    const_iterateur it=l.begin(),itend=l.end();
    for (; it!=itend; ++it) {
      if (it->type!=_IDNT)
	continue;
      lock_syms_mutex();
      sym_string_tab::const_iterator i = syms().find(it->_IDNTptr->id_name),iend=syms().end();
      if (i==iend)
	syms()[it->_IDNTptr->name()] = *it;
      unlock_syms_mutex();  
    }
  }
  
    std::string translate_at(const char * ch){
      if (!strcmp(ch,"ΔLIST"))
	return "DELTALIST";
      if (!strcmp(ch,"ΠLIST"))
	return "PILIST";
      if (!strcmp(ch,"ΣLIST"))
	return "SIGMALIST";
      if (!strcmp(ch,"∫"))
	return "HPINT";
      if (!strcmp(ch,"∂"))
	return "HPDIFF";
      if (!strcmp(ch,"Σ"))
	return "HPSUM";
      if (!strcmp(ch,"∑"))
	return "HPSUM";
      string res;
      for (;*ch;++ch){
        if (*ch=='%')
          res +="PERCENT";
        else
          res += *ch;
      }
      return res;
    }
    
    // Set the input string
    // export GIAC_DEBUG=-2 to renew static_lexer.h/static_extern.h
    YY_BUFFER_STATE set_lexer_string(const std::string &s_orig,yyscan_t & scanner,GIAC_CONTEXT){
#if 0
#ifdef NSPIRE
      FILE * f= fopen("/documents/log.tns","w"); // ends up in My Documents
      fprintf(f,"%s",s_orig.c_str());
      fclose(f);
#else
      ofstream of("log"); // ends up in fir/windows/log
      of << s_orig<< endl;
#endif
#endif
      if (abs_calc_mode(contextptr)==38 && s_orig==string(s_orig.size(),' '))
	giac_yyerror(scanner,"Void string");
#if !defined RTOS_THREADX && !defined NSPIRE
      if (!builtin_lexer_functions_sorted){
#ifndef STATIC_BUILTIN_LEXER_FUNCTIONS
	sort(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),tri);
#endif
	builtin_lexer_functions_sorted=true;
	int nfunc=builtin_lexer_functions_number;
	if (debug_infolevel==-2 || debug_infolevel==-4 || debug_infolevel==-5){
	  CERR << "Writing " << nfunc << " in static_lexer.h and static_extern.h "<< endl;
	  /*
	  ofstream static_add_ll("static_add.ll");
	  for (int i=0;i<nfunc;i++){
	    static_add_ll << "\"" << builtin_lexer_functions_begin()[i].first << "\" " ;
	    static_add_ll << "*yylval=gen(at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ",0); index_status(yyextra)=0; ";
	    static_add_ll << "return " << signed(builtin_lexer_functions_begin()[i].second.subtype)+256 << ";" ;
            static_add_ll << endl;
	  }
	  static_add_ll.close();
	  */
	  ofstream static_lexer("static_lexer.h");
	  for (int i=0;i<nfunc;i++){
	    static_lexer << "{\"" << builtin_lexer_functions_begin()[i].first << "\",13," << signed(builtin_lexer_functions_begin()[i].second.subtype) ;
	    if (debug_infolevel==-2)
	      static_lexer << ",0,*((ulonglong *) at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ")";
	    else
	      static_lexer << ",0,0"; 
	    if (builtin_lexer_functions_begin()[i].second._FUNCptr->quoted())
	      static_lexer << "| 1";
	    static_lexer << "}" ;
	    if (i!=nfunc-1)
	      static_lexer << ",";
	    static_lexer << endl;
	  }
	  static_lexer.close();
	  if (debug_infolevel==-4){
	    ofstream static_lexer_("static_lexer_.h");
	    for (int i=0;i<nfunc;i++){
	      static_lexer_ << "*((unsigned long *) at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ")";
	      if (i!=nfunc-1)
		static_lexer_ << ",";
	      static_lexer_ << endl;
	    }
	    static_lexer_.close();
	  }
	  if (debug_infolevel==-5){
	    ofstream static_lexer_("static_lexer_at.h");
	    for (int i=0;i<nfunc;i++){
	      static_lexer_ << "res->push_back(*(unsigned long *)at_" << translate_at(builtin_lexer_functions_begin()[i].first) <<")";
	      if (i!=nfunc-1)
		static_lexer_ << ",";
	      static_lexer_ << endl;
	    }
	    static_lexer_.close();
	  }
	  ofstream static_extern("static_extern.h");
	  static_extern << "#ifndef STATIC_EXTERN" << endl;
	  static_extern << "#define STATIC_EXTERN" << endl;
	  static_extern << "struct unary_function_ptr;" << endl;
	  for (int i=0;i<nfunc;i++){
	    static_extern << "extern const unary_function_ptr * const  at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ";" << endl;
	  }
	  static_extern << "#endif // STATIC_EXTERN" << endl;
	  static_extern.close();
	}
      }
#endif // RTOS_THREADX
      string s(s_orig),lexer_string;
#ifdef NSPIRE
      for (unsigned i=0;i<s.size()-1;++i){
	if (s[i]==']' && s[i+1]=='['){
	  string tmp=s.substr(0,i+1)+string(",");
	  s=tmp+s.substr(i+1,s.size()-i-1);
	}
      }
#endif
      bool instring=false;
      // stupid match of bracket then parenthesis
      int l=s.size(),nb=0,np=0;
      int i=0;
      if (lexer_close_parenthesis(contextptr)){
	for (;i<l;++i){
	  if (!instring && i && s[i]=='/' && s[i-1]=='/'){
	    // skip comment until end of line
	    for (;i<l;++i){
	      if (s[i]==13)
		break;
	    }
	    continue;
	  }
	  if (!instring && i && s[i]=='*' && s[i-1]=='/'){
	    // skip comment 
	    for (;i<l;++i){
	      if (s[i]=='/' && s[i-1]=='*')
		break;
	    }
	    continue;
	  }
	  if (!instring && s[i]==92){
	    i += 2;
	    if (i>=l)
	      break;
	  }
	  if (instring){
	    if (s[i]=='"')
	      instring=false;
	  }
	  else {
	    switch (s[i]){
	    case '"':
	      instring=true;
	      break;
	    case '(':
	      ++np;
	      break;
	    case ')':
	      --np;
	      break;
	    case '[':
	      ++nb;
	      break;
	    case ']':
	      --nb;
	      break;
	    }
	  }
	}
	while (np<0 && i>=0 && s[i-1]==')'){
	  --i;
	  ++np;
	}
	while (nb<0 && i>=0 && s[i-1]==']'){
	  --i;
	  ++nb;
	}
	s=s.substr(0,i);
	if (nb<0)
	  CERR << "Too many ]" << endl;
	if (np<0)
	  CERR << "Too many )" << endl;
	if (nb>0){
	  *logptr(contextptr) << "Warning adding " << nb << " ] at end of input" << endl;
	  s=s+string(nb,']');
	}
	if (np>0){
	  *logptr(contextptr) << "Warning adding " << np << " ) at end of input" << endl;
	  s=s+string(np,')');
	}
      }
      index_status(contextptr)=0;
      opened_quote(contextptr)=0;
      in_rpn(contextptr)=0;
      lexer_line_number(contextptr)=1;
      first_error_line(contextptr)=0;
      spread_formula(contextptr)=0;
      l=s.size();
      for (;l;l--){
	if (s[l-1]!=' ')
	  break;
      }
      // strings ending with :;
      while (l>=4 && s[l-1]==';' && s[l-2]==':'){
	// skip spaces before :;
	int m;
	for (m=l-3;m>0;--m){
	  if (s[m]!=' ')
	    break;
	}
	if (m<=1 || s[m]!=';')
	  break;
	if (s[m-1]==':')
	  l = m+1;
	else {
	  s[m]=':';
	  s[m+1]=';';
	  l=m+2;
	}
      }
      s=s.substr(0,l);
      /* if (l && ( (s[l-1]==';') || (s[l-1]==':')))
	 l--; */
      string ss;
      for (int i=0;i<l;++i){
	if (i && (unsigned char)s[i]==0xc2 && (unsigned char)s[i+1]!=0xb0)
	  ss += ' ';
	if ( (unsigned char)s[i]==0xef && i<l-3 ){
          if ((unsigned char)s[i+1]==0x80 && (unsigned char)s[i+2]==0x80 ){  
	    ss+='e';
	    i+=2;
	    continue;
	  }
	}
	if ( (unsigned char)s[i]==0xe2 && i<l-3 ){
          if ((unsigned char)s[i+1]==0x89){ 
	    ss += ' ';
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ss += ' ';
	    continue;
	  } // 0xe2 0x89	  
          if ((unsigned char)s[i+1]==0x88){ 
	    // mathop, add blank before and after except following an e/E 
	    if ((unsigned char) s[i+2]==0x91){ // sigma
	      ss += " SIGMA";
	      i +=2;
	      continue;
	    }
	    if ((unsigned char) s[i+2]==0x86){ // delta
	      ss += " DELTA";
	      i +=2;
	      continue;
	    }
	    if ((unsigned char) s[i+2]==0x8f){ // pi
	      ss += " PI";
	      i +=2;
	      continue;
	    }
	    if ( i>1 && (s[i-1]=='e' || s[i-1]=='E')){
	      ss +='-';
	      i +=2;
	      continue;
	    }
	    if (i>2  && (s[i-1]==' ' && (s[i-2]=='e' || s[i-2]=='E')) ){
	      ss[ss.size()-1] = '-';
	      i += 3;
	      continue;
	    }
	    ss += ' ';
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ss += ' ';
	    continue;
	  } // 0xe2 0x88
          if ((unsigned char)s[i+1]==0x96 && ((unsigned char)s[i+2]==0xba || (unsigned char)s[i+2]==182 )){  
	    // sto 
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ss += ' ';
	    continue;
	  } // 0xe2 0x96
          if ((unsigned char)s[i+1]==0x86 && (unsigned char)s[i+2]==0x92){  
	    // sto 
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ss += ' ';
	    continue;
	  } // 0xe2 0x96
	} //end if s[i]=0xe2
	if (s[i]=='.'){
	  if ( i && (i<l-1) && (s[i-1]!=' ') && (s[i+1]=='.') ){
	    ss+= " ..";
	    ++i;
	  }
	  else
	    ss+='.';
	}
	else {
	  if (xcas_mode(contextptr) > 0 && xcas_mode(contextptr) !=3){
	    if (s[i]=='#')
	      ss += "//";
	    else
	      ss += s[i];
	  }
	  else
	    ss+=s[i];
	}
      }
      // ofstream of("log"); of << s << endl << ss << endl; of.close();
      if (debug_infolevel>2)
	CERR << "lexer " << ss << endl;
      lexer_string = ss+" \n ÿ";
      giac_yylex_init(&scanner);
      giac_yyset_extra(contextptr,scanner);
      YY_BUFFER_STATE state=giac_yy_scan_string(lexer_string.c_str(),scanner);
      return state;
    }

    int delete_lexer_string(YY_BUFFER_STATE & state,yyscan_t & scanner){
      giac_yy_delete_buffer(state,scanner);
      giac_yylex_destroy(scanner);
      return 1;
    }

#ifndef NO_NAMESPACE_GIAC
  } // namespace giac
#endif // ndef NO_NAMESPACE_GIAC
  

